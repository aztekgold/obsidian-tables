/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JsonTablePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/JsonTableView.ts
var import_obsidian6 = require("obsidian");

// src/types.ts
var VIEW_TYPE_JSON_TABLE = "json-table-view";
var DEFAULT_SETTINGS = {
  tableRenderer: "default"
  // Default to using .table.md files for compatibility
};

// src/renderers/TextRenderer.ts
var TextRenderer = class {
  render(app, container, value, column, onChange) {
    const input = container.createEl("input", {
      type: "text",
      value,
      cls: "json-table-input",
      title: value
      // Show full value on hover
    });
    input.addEventListener("blur", () => onChange(input.value));
    input.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        input.blur();
      }
    });
  }
};

// src/renderers/CheckboxRenderer.ts
var CheckboxRenderer = class {
  render(app, container, value, column, onChange) {
    const cellContent = container.createEl("div", { cls: "json-table-cell-content json-table-cell-checkbox" });
    const input = cellContent.createEl("input", {
      type: "checkbox",
      cls: "json-table-checkbox"
    });
    input.checked = value === "true";
    input.addEventListener("change", () => {
      onChange(input.checked.toString());
    });
  }
};

// src/renderers/DropdownRenderer.ts
var DropdownRenderer = class {
  render(app, container, value, column, onChange) {
    container.empty();
    const wrapper = container.createEl("div", {
      cls: "json-table-dropdown"
    });
    this.renderTags(wrapper, value, column);
    wrapper.addEventListener("click", (e) => {
      e.stopPropagation();
      this.renderEdit(app, wrapper, value, column, onChange);
    });
  }
  /**
   * Renders the simple tag (display mode)
   */
  renderDisplay(app, wrapper, value, column, onChange) {
    wrapper.empty();
    wrapper.removeClass("is-editing");
    this.renderTags(wrapper, value, column);
    wrapper.addEventListener("click", (e) => {
      e.stopPropagation();
      this.renderEdit(app, wrapper, value, column, onChange);
    });
  }
  /**
   * Renders the tag with "x" button and shows the options popup (edit mode)
   */
  renderEdit(app, wrapper, value, column, onChange) {
    const parent = wrapper.parentNode;
    if (!parent) return;
    const newWrapper = wrapper.cloneNode(false);
    parent.replaceChild(newWrapper, wrapper);
    newWrapper.empty();
    newWrapper.addClass("is-editing");
    const handleRemove = () => {
      value = "";
      onChange("");
      this.renderEdit(app, newWrapper, "", column, onChange);
    };
    this.renderTags(newWrapper, value, column, handleRemove);
    const popup = this.showDropdownPopup(
      newWrapper,
      value,
      column,
      (selectedValue) => {
        value = selectedValue;
        onChange(selectedValue);
        this.renderEdit(app, newWrapper, selectedValue, column, onChange);
      }
    );
    const clickOutside = (e) => {
      if (!newWrapper.contains(e.target) && !popup.contains(e.target)) {
        document.removeEventListener("click", clickOutside, true);
        popup.remove();
        this.renderDisplay(app, newWrapper, value, column, onChange);
      }
    };
    setTimeout(() => {
      document.addEventListener("click", clickOutside, true);
    }, 0);
  }
  /**
   * Helper function to render the tag inside a wrapper
   * @param wrapper The element to render tag into
   * @param value The current value string
   * @param column The column definition
   * @param onRemove Optional callback for adding "x" button (edit mode)
   */
  renderTags(wrapper, value, column, onRemove) {
    const typeOpts = column.typeOptions;
    const allOptions = (typeOpts == null ? void 0 : typeOpts.options) || [];
    wrapper.empty();
    if (!value) {
      if (!onRemove) {
        wrapper.createEl("span", {
          text: "",
          cls: "json-table-dropdown-placeholder"
        });
      }
      return;
    }
    const option = allOptions.find((opt) => opt.value === value);
    const tagContainer = wrapper.createEl("span", {
      cls: "json-table-dropdown-tag"
    });
    if (option && option.style) {
      tagContainer.addClass(`dropdown-tag--${option.style}`);
    } else {
      tagContainer.addClass("dropdown-tag--default");
    }
    tagContainer.createEl("span", { text: value });
    if (onRemove) {
      const removeBtn = tagContainer.createEl("span", {
        text: "\xD7",
        cls: "json-table-multiselect-tag-remove"
      });
      removeBtn.addEventListener("mousedown", (e) => {
        e.preventDefault();
        e.stopPropagation();
        onRemove();
      });
    }
  }
  /**
   * Shows the popup with all available options
   */
  showDropdownPopup(wrapper, currentValue, column, onSelect) {
    const typeOpts = column.typeOptions;
    const allOptions = (typeOpts == null ? void 0 : typeOpts.options) || [];
    const existingPopup = document.body.querySelector(".json-table-dropdown-popup");
    if (existingPopup) existingPopup.remove();
    const popup = document.body.createEl("div", {
      cls: "json-table-popup json-table-dropdown-popup"
    });
    const rect = wrapper.getBoundingClientRect();
    popup.style.top = `${rect.bottom + 4}px`;
    popup.style.left = `${rect.left}px`;
    popup.style.minWidth = `${rect.width}px`;
    if (allOptions.length > 0) {
      allOptions.forEach((option) => {
        const optionEl = popup.createEl("div", {
          cls: "json-table-dropdown-option"
        });
        const tag = optionEl.createEl("span", {
          text: option.value,
          cls: "json-table-dropdown-tag"
        });
        if (option.style) {
          tag.addClass(`dropdown-tag--${option.style}`);
        }
        if (option.value === currentValue) {
          optionEl.addClass("is-selected");
        }
        optionEl.addEventListener("mousedown", (e) => {
          e.preventDefault();
          onSelect(option.value);
        });
      });
    } else {
      popup.createEl("div", {
        text: "No options defined",
        cls: "json-table-dropdown-option is-disabled"
      });
    }
    return popup;
  }
};

// src/renderers/MultiSelectRenderer.ts
var MultiSelectRenderer = class {
  render(app, container, value, column, onChange) {
    container.empty();
    const wrapper = container.createEl("div", {
      cls: "json-table-multiselect"
    });
    this.renderTags(wrapper, value, column);
    wrapper.addEventListener("click", (e) => {
      e.stopPropagation();
      this.renderEdit(app, wrapper, value, column, onChange);
    });
  }
  /**
   * Renders the simple tags (display mode)
   */
  renderDisplay(app, wrapper, value, column, onChange) {
    wrapper.empty();
    wrapper.removeClass("is-editing");
    this.renderTags(wrapper, value, column);
    wrapper.addEventListener("click", (e) => {
      e.stopPropagation();
      this.renderEdit(app, wrapper, value, column, onChange);
    });
  }
  /**
   * Renders the tags with "x" buttons and shows the options popup (edit mode)
   */
  renderEdit(app, wrapper, value, column, onChange) {
    const parent = wrapper.parentNode;
    if (!parent) return;
    const newWrapper = wrapper.cloneNode(false);
    parent.replaceChild(newWrapper, wrapper);
    newWrapper.empty();
    newWrapper.addClass("is-editing");
    const handleRemove = (valueToRemove) => {
      const selected = this.getValues(value);
      const newSelected = selected.filter((val) => val !== valueToRemove);
      const newValue = newSelected.join(",");
      value = newValue;
      onChange(newValue);
      this.renderEdit(app, newWrapper, newValue, column, onChange);
    };
    this.renderTags(newWrapper, value, column, handleRemove);
    const popup = this.showDropdownPopup(
      newWrapper,
      value,
      column,
      (valueToAdd) => {
        const selected = this.getValues(value);
        if (selected.includes(valueToAdd)) {
          return;
        }
        selected.push(valueToAdd);
        const newValue = selected.join(",");
        value = newValue;
        onChange(newValue);
        this.renderEdit(app, newWrapper, value, column, onChange);
      }
    );
    const clickOutside = (e) => {
      if (!newWrapper.contains(e.target) && !popup.contains(e.target)) {
        document.removeEventListener("click", clickOutside, true);
        popup.remove();
        this.renderDisplay(app, newWrapper, value, column, onChange);
      }
    };
    setTimeout(() => {
      document.addEventListener("click", clickOutside, true);
    }, 0);
  }
  /**
   * Helper to get values array from the comma-separated string
   */
  getValues(value) {
    return value ? value.split(",").filter(Boolean) : [];
  }
  /**
   * Helper function to render the tags inside a wrapper
   * @param wrapper The element to render tags into
   * @param value The current comma-separated value string
   * @param column The column definition
   * @param onRemove Optional callback for adding "x" buttons (edit mode)
   */
  renderTags(wrapper, value, column, onRemove) {
    const typeOpts = column.typeOptions;
    const allOptions = (typeOpts == null ? void 0 : typeOpts.options) || [];
    const selectedValues = this.getValues(value);
    wrapper.empty();
    if (selectedValues.length === 0) {
      if (!onRemove) {
        wrapper.createEl("span", {
          text: "",
          cls: "json-table-dropdown-placeholder"
        });
      }
      return;
    }
    selectedValues.forEach((val) => {
      const option = allOptions.find((opt) => opt.value === val);
      const tagContainer = wrapper.createEl("span", {
        cls: "json-table-dropdown-tag"
      });
      if (option && option.style) {
        tagContainer.addClass(`dropdown-tag--${option.style}`);
      } else {
        tagContainer.addClass("dropdown-tag--default");
      }
      tagContainer.createEl("span", { text: val });
      if (onRemove) {
        const removeBtn = tagContainer.createEl("span", {
          text: "\xD7",
          cls: "json-table-multiselect-tag-remove"
        });
        removeBtn.addEventListener("mousedown", (e) => {
          e.preventDefault();
          e.stopPropagation();
          onRemove(val);
        });
      }
    });
  }
  /**
   * Shows the popup with all available options
   */
  showDropdownPopup(wrapper, currentValue, column, onSelect) {
    const typeOpts = column.typeOptions;
    const allOptions = (typeOpts == null ? void 0 : typeOpts.options) || [];
    const existingPopup = document.body.querySelector(".json-table-dropdown-popup");
    if (existingPopup) existingPopup.remove();
    const popup = document.body.createEl("div", {
      cls: "json-table-popup json-table-dropdown-popup"
    });
    const rect = wrapper.getBoundingClientRect();
    popup.style.top = `${rect.bottom + 4}px`;
    popup.style.left = `${rect.left}px`;
    popup.style.minWidth = `${rect.width}px`;
    const selected = this.getValues(currentValue);
    if (allOptions.length > 0) {
      allOptions.forEach((option) => {
        const optionEl = popup.createEl("div", {
          cls: "json-table-dropdown-option"
        });
        const tag = optionEl.createEl("span", {
          text: option.value,
          cls: "json-table-dropdown-tag"
        });
        if (option.style) {
          tag.addClass(`dropdown-tag--${option.style}`);
        }
        if (selected.includes(option.value)) {
          optionEl.addClass("is-selected");
        }
        optionEl.addEventListener("mousedown", (e) => {
          e.preventDefault();
          onSelect(option.value);
        });
      });
    } else {
      popup.createEl("div", {
        text: "No options defined",
        cls: "json-table-dropdown-option is-disabled"
      });
    }
    return popup;
  }
};

// src/suggesters/FileSuggest.ts
var import_obsidian = require("obsidian");
var FileSuggest = class extends import_obsidian.AbstractInputSuggest {
  constructor(app, inputEl, suggestAllFiles, onSaveCallback) {
    super(app, inputEl);
    this.suggestAllFiles = suggestAllFiles;
    this.onSaveCallback = onSaveCallback;
  }
  getSuggestions(query) {
    const lowerCaseQuery = query.toLowerCase();
    const allFiles = this.suggestAllFiles ? this.app.vault.getFiles() : this.app.vault.getMarkdownFiles();
    return allFiles.filter(
      (file) => file.basename.toLowerCase().includes(lowerCaseQuery) || file.path.toLowerCase().includes(lowerCaseQuery)
    );
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
    el.addClass("mod-complex");
  }
  selectSuggestion(file, evt) {
    const value = file.path;
    this.setValue(value);
    this.close();
    this.onSaveCallback(value);
  }
};

// src/renderers/NoteLinkRenderer.ts
var NoteLinkRenderer = class {
  // Main render method required by the interface
  render(app, container, value, column, onChange) {
    container.empty();
    const wrapper = container.createEl("div", {
      cls: "json-table-notelink-wrapper"
    });
    this.renderDisplay(app, wrapper, value, column, onChange);
  }
  /** Renders the link (or "empty" state) */
  renderDisplay(app, wrapper, value, column, onChange) {
    wrapper.empty();
    wrapper.addClass("is-displaying-link");
    const file = app.metadataCache.getFirstLinkpathDest(value, "");
    wrapper.addEventListener("click", (e) => {
      if (e.target === wrapper) {
        this.renderEdit(app, wrapper, value, column, onChange);
      }
    });
    if (file) {
      const link = wrapper.createEl("a", {
        text: file.basename,
        cls: "internal-link",
        attr: { "data-href": value, "href": value }
      });
      link.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        app.workspace.openLinkText(value, "", false);
      });
    } else {
      wrapper.createEl("span", {
        text: value || "",
        // Show invalid text or placeholder
        cls: "json-table-notelink-empty"
      });
    }
  }
  /** Renders the input box for editing */
  renderEdit(app, wrapper, value, column, onChange) {
    const parent = wrapper.parentNode;
    if (!parent) return;
    const newWrapper = wrapper.cloneNode(false);
    parent.replaceChild(newWrapper, wrapper);
    newWrapper.empty();
    newWrapper.removeClass("is-displaying-link");
    const input = newWrapper.createEl("input", {
      type: "text",
      value,
      cls: "json-table-input"
    });
    let saveCalled = false;
    const save = (saveValue) => {
      if (saveCalled) return;
      saveCalled = true;
      if (!newWrapper.parentElement) return;
      const linkText = saveValue.trim();
      let savePath = linkText;
      if (linkText) {
        const file = app.metadataCache.getFirstLinkpathDest(linkText, "");
        if (file) {
          savePath = file.path;
        }
      }
      onChange(savePath);
      this.renderDisplay(app, newWrapper, savePath, column, onChange);
    };
    const typeOpts = column.typeOptions;
    const suggestAll = !!(typeOpts == null ? void 0 : typeOpts.suggestAllFiles);
    const suggester = new FileSuggest(
      app,
      input,
      suggestAll,
      // Pass the setting
      (selectedValue) => {
        save(selectedValue);
      }
      // Pass the save callback
    );
    setTimeout(() => {
      input.focus();
      input.select();
    }, 0);
    input.addEventListener("keydown", (e) => {
      const isSuggesterOpen = !!document.body.querySelector(".suggestion-container");
      if (e.key === "Enter") {
        e.preventDefault();
        if (isSuggesterOpen) {
          return;
        }
        save(input.value);
      }
      if (e.key === "Escape") {
        e.preventDefault();
        if (isSuggesterOpen) {
          suggester.close();
        } else {
          this.renderDisplay(app, newWrapper, value, column, onChange);
        }
      }
    });
    input.addEventListener("blur", (e) => {
      setTimeout(() => {
        if (!saveCalled) {
          save(input.value);
        }
      }, 100);
    });
  }
  // End renderEdit method
};

// node_modules/flatpickr/dist/esm/types/options.js
var HOOKS = [
  "onChange",
  "onClose",
  "onDayCreate",
  "onDestroy",
  "onKeyDown",
  "onMonthChange",
  "onOpen",
  "onParseConfig",
  "onReady",
  "onValueUpdate",
  "onYearChange",
  "onPreCalendarPosition"
];
var defaults = {
  _disable: [],
  allowInput: false,
  allowInvalidPreload: false,
  altFormat: "F j, Y",
  altInput: false,
  altInputClass: "form-control input",
  animate: typeof window === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
  ariaDateFormat: "F j, Y",
  autoFillDefaultTime: true,
  clickOpens: true,
  closeOnSelect: true,
  conjunction: ", ",
  dateFormat: "Y-m-d",
  defaultHour: 12,
  defaultMinute: 0,
  defaultSeconds: 0,
  disable: [],
  disableMobile: false,
  enableSeconds: false,
  enableTime: false,
  errorHandler: function(err) {
    return typeof console !== "undefined" && console.warn(err);
  },
  getWeek: function(givenDate) {
    var date = new Date(givenDate.getTime());
    date.setHours(0, 0, 0, 0);
    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
    var week1 = new Date(date.getFullYear(), 0, 4);
    return 1 + Math.round(((date.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
  },
  hourIncrement: 1,
  ignoredFocusElements: [],
  inline: false,
  locale: "default",
  minuteIncrement: 5,
  mode: "single",
  monthSelectorType: "dropdown",
  nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
  noCalendar: false,
  now: /* @__PURE__ */ new Date(),
  onChange: [],
  onClose: [],
  onDayCreate: [],
  onDestroy: [],
  onKeyDown: [],
  onMonthChange: [],
  onOpen: [],
  onParseConfig: [],
  onReady: [],
  onValueUpdate: [],
  onYearChange: [],
  onPreCalendarPosition: [],
  plugins: [],
  position: "auto",
  positionElement: void 0,
  prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
  shorthandCurrentMonth: false,
  showMonths: 1,
  static: false,
  time_24hr: false,
  weekNumbers: false,
  wrap: false
};

// node_modules/flatpickr/dist/esm/l10n/default.js
var english = {
  weekdays: {
    shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    longhand: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ]
  },
  months: {
    shorthand: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    longhand: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ]
  },
  daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
  firstDayOfWeek: 0,
  ordinal: function(nth) {
    var s = nth % 100;
    if (s > 3 && s < 21)
      return "th";
    switch (s % 10) {
      case 1:
        return "st";
      case 2:
        return "nd";
      case 3:
        return "rd";
      default:
        return "th";
    }
  },
  rangeSeparator: " to ",
  weekAbbreviation: "Wk",
  scrollTitle: "Scroll to increment",
  toggleTitle: "Click to toggle",
  amPM: ["AM", "PM"],
  yearAriaLabel: "Year",
  monthAriaLabel: "Month",
  hourAriaLabel: "Hour",
  minuteAriaLabel: "Minute",
  time_24hr: false
};
var default_default = english;

// node_modules/flatpickr/dist/esm/utils/index.js
var pad = function(number, length) {
  if (length === void 0) {
    length = 2;
  }
  return ("000" + number).slice(length * -1);
};
var int = function(bool) {
  return bool === true ? 1 : 0;
};
function debounce(fn, wait) {
  var t;
  return function() {
    var _this = this;
    var args = arguments;
    clearTimeout(t);
    t = setTimeout(function() {
      return fn.apply(_this, args);
    }, wait);
  };
}
var arrayify = function(obj) {
  return obj instanceof Array ? obj : [obj];
};

// node_modules/flatpickr/dist/esm/utils/dom.js
function toggleClass(elem, className, bool) {
  if (bool === true)
    return elem.classList.add(className);
  elem.classList.remove(className);
}
function createElement(tag, className, content) {
  var e = window.document.createElement(tag);
  className = className || "";
  content = content || "";
  e.className = className;
  if (content !== void 0)
    e.textContent = content;
  return e;
}
function clearNode(node) {
  while (node.firstChild)
    node.removeChild(node.firstChild);
}
function findParent(node, condition) {
  if (condition(node))
    return node;
  else if (node.parentNode)
    return findParent(node.parentNode, condition);
  return void 0;
}
function createNumberInput(inputClassName, opts) {
  var wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
  if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
    numInput.type = "number";
  } else {
    numInput.type = "text";
    numInput.pattern = "\\d*";
  }
  if (opts !== void 0)
    for (var key in opts)
      numInput.setAttribute(key, opts[key]);
  wrapper.appendChild(numInput);
  wrapper.appendChild(arrowUp);
  wrapper.appendChild(arrowDown);
  return wrapper;
}
function getEventTarget(event) {
  try {
    if (typeof event.composedPath === "function") {
      var path = event.composedPath();
      return path[0];
    }
    return event.target;
  } catch (error) {
    return event.target;
  }
}

// node_modules/flatpickr/dist/esm/utils/formatting.js
var doNothing = function() {
  return void 0;
};
var monthToStr = function(monthNumber, shorthand, locale) {
  return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
};
var revFormat = {
  D: doNothing,
  F: function(dateObj, monthName, locale) {
    dateObj.setMonth(locale.months.longhand.indexOf(monthName));
  },
  G: function(dateObj, hour) {
    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  },
  H: function(dateObj, hour) {
    dateObj.setHours(parseFloat(hour));
  },
  J: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  K: function(dateObj, amPM, locale) {
    dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
  },
  M: function(dateObj, shortMonth, locale) {
    dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
  },
  S: function(dateObj, seconds) {
    dateObj.setSeconds(parseFloat(seconds));
  },
  U: function(_, unixSeconds) {
    return new Date(parseFloat(unixSeconds) * 1e3);
  },
  W: function(dateObj, weekNum, locale) {
    var weekNumber = parseInt(weekNum);
    var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
    date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
    return date;
  },
  Y: function(dateObj, year) {
    dateObj.setFullYear(parseFloat(year));
  },
  Z: function(_, ISODate) {
    return new Date(ISODate);
  },
  d: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  h: function(dateObj, hour) {
    dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
  },
  i: function(dateObj, minutes) {
    dateObj.setMinutes(parseFloat(minutes));
  },
  j: function(dateObj, day) {
    dateObj.setDate(parseFloat(day));
  },
  l: doNothing,
  m: function(dateObj, month) {
    dateObj.setMonth(parseFloat(month) - 1);
  },
  n: function(dateObj, month) {
    dateObj.setMonth(parseFloat(month) - 1);
  },
  s: function(dateObj, seconds) {
    dateObj.setSeconds(parseFloat(seconds));
  },
  u: function(_, unixMillSeconds) {
    return new Date(parseFloat(unixMillSeconds));
  },
  w: doNothing,
  y: function(dateObj, year) {
    dateObj.setFullYear(2e3 + parseFloat(year));
  }
};
var tokenRegex = {
  D: "",
  F: "",
  G: "(\\d\\d|\\d)",
  H: "(\\d\\d|\\d)",
  J: "(\\d\\d|\\d)\\w+",
  K: "",
  M: "",
  S: "(\\d\\d|\\d)",
  U: "(.+)",
  W: "(\\d\\d|\\d)",
  Y: "(\\d{4})",
  Z: "(.+)",
  d: "(\\d\\d|\\d)",
  h: "(\\d\\d|\\d)",
  i: "(\\d\\d|\\d)",
  j: "(\\d\\d|\\d)",
  l: "",
  m: "(\\d\\d|\\d)",
  n: "(\\d\\d|\\d)",
  s: "(\\d\\d|\\d)",
  u: "(.+)",
  w: "(\\d\\d|\\d)",
  y: "(\\d{2})"
};
var formats = {
  Z: function(date) {
    return date.toISOString();
  },
  D: function(date, locale, options) {
    return locale.weekdays.shorthand[formats.w(date, locale, options)];
  },
  F: function(date, locale, options) {
    return monthToStr(formats.n(date, locale, options) - 1, false, locale);
  },
  G: function(date, locale, options) {
    return pad(formats.h(date, locale, options));
  },
  H: function(date) {
    return pad(date.getHours());
  },
  J: function(date, locale) {
    return locale.ordinal !== void 0 ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
  },
  K: function(date, locale) {
    return locale.amPM[int(date.getHours() > 11)];
  },
  M: function(date, locale) {
    return monthToStr(date.getMonth(), true, locale);
  },
  S: function(date) {
    return pad(date.getSeconds());
  },
  U: function(date) {
    return date.getTime() / 1e3;
  },
  W: function(date, _, options) {
    return options.getWeek(date);
  },
  Y: function(date) {
    return pad(date.getFullYear(), 4);
  },
  d: function(date) {
    return pad(date.getDate());
  },
  h: function(date) {
    return date.getHours() % 12 ? date.getHours() % 12 : 12;
  },
  i: function(date) {
    return pad(date.getMinutes());
  },
  j: function(date) {
    return date.getDate();
  },
  l: function(date, locale) {
    return locale.weekdays.longhand[date.getDay()];
  },
  m: function(date) {
    return pad(date.getMonth() + 1);
  },
  n: function(date) {
    return date.getMonth() + 1;
  },
  s: function(date) {
    return date.getSeconds();
  },
  u: function(date) {
    return date.getTime();
  },
  w: function(date) {
    return date.getDay();
  },
  y: function(date) {
    return String(date.getFullYear()).substring(2);
  }
};

// node_modules/flatpickr/dist/esm/utils/dates.js
var createDateFormatter = function(_a) {
  var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c, _d = _a.isMobile, isMobile = _d === void 0 ? false : _d;
  return function(dateObj, frmt, overrideLocale) {
    var locale = overrideLocale || l10n;
    if (config.formatDate !== void 0 && !isMobile) {
      return config.formatDate(dateObj, frmt, locale);
    }
    return frmt.split("").map(function(c, i, arr) {
      return formats[c] && arr[i - 1] !== "\\" ? formats[c](dateObj, locale, config) : c !== "\\" ? c : "";
    }).join("");
  };
};
var createDateParser = function(_a) {
  var _b = _a.config, config = _b === void 0 ? defaults : _b, _c = _a.l10n, l10n = _c === void 0 ? english : _c;
  return function(date, givenFormat, timeless, customLocale) {
    if (date !== 0 && !date)
      return void 0;
    var locale = customLocale || l10n;
    var parsedDate;
    var dateOrig = date;
    if (date instanceof Date)
      parsedDate = new Date(date.getTime());
    else if (typeof date !== "string" && date.toFixed !== void 0)
      parsedDate = new Date(date);
    else if (typeof date === "string") {
      var format2 = givenFormat || (config || defaults).dateFormat;
      var datestr = String(date).trim();
      if (datestr === "today") {
        parsedDate = /* @__PURE__ */ new Date();
        timeless = true;
      } else if (config && config.parseDate) {
        parsedDate = config.parseDate(date, format2);
      } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) {
        parsedDate = new Date(date);
      } else {
        var matched = void 0, ops = [];
        for (var i = 0, matchIndex = 0, regexStr = ""; i < format2.length; i++) {
          var token = format2[i];
          var isBackSlash = token === "\\";
          var escaped = format2[i - 1] === "\\" || isBackSlash;
          if (tokenRegex[token] && !escaped) {
            regexStr += tokenRegex[token];
            var match2 = new RegExp(regexStr).exec(date);
            if (match2 && (matched = true)) {
              ops[token !== "Y" ? "push" : "unshift"]({
                fn: revFormat[token],
                val: match2[++matchIndex]
              });
            }
          } else if (!isBackSlash)
            regexStr += ".";
        }
        parsedDate = !config || !config.noCalendar ? new Date((/* @__PURE__ */ new Date()).getFullYear(), 0, 1, 0, 0, 0, 0) : new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        ops.forEach(function(_a2) {
          var fn = _a2.fn, val = _a2.val;
          return parsedDate = fn(parsedDate, val, locale) || parsedDate;
        });
        parsedDate = matched ? parsedDate : void 0;
      }
    }
    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
      config.errorHandler(new Error("Invalid date provided: " + dateOrig));
      return void 0;
    }
    if (timeless === true)
      parsedDate.setHours(0, 0, 0, 0);
    return parsedDate;
  };
};
function compareDates(date1, date2, timeless) {
  if (timeless === void 0) {
    timeless = true;
  }
  if (timeless !== false) {
    return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
  }
  return date1.getTime() - date2.getTime();
}
var isBetween = function(ts, ts1, ts2) {
  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
};
var calculateSecondsSinceMidnight = function(hours, minutes, seconds) {
  return hours * 3600 + minutes * 60 + seconds;
};
var parseSeconds = function(secondsSinceMidnight) {
  var hours = Math.floor(secondsSinceMidnight / 3600), minutes = (secondsSinceMidnight - hours * 3600) / 60;
  return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
};
var duration = {
  DAY: 864e5
};
function getDefaultHours(config) {
  var hours = config.defaultHour;
  var minutes = config.defaultMinute;
  var seconds = config.defaultSeconds;
  if (config.minDate !== void 0) {
    var minHour = config.minDate.getHours();
    var minMinutes = config.minDate.getMinutes();
    var minSeconds = config.minDate.getSeconds();
    if (hours < minHour) {
      hours = minHour;
    }
    if (hours === minHour && minutes < minMinutes) {
      minutes = minMinutes;
    }
    if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
      seconds = config.minDate.getSeconds();
  }
  if (config.maxDate !== void 0) {
    var maxHr = config.maxDate.getHours();
    var maxMinutes = config.maxDate.getMinutes();
    hours = Math.min(hours, maxHr);
    if (hours === maxHr)
      minutes = Math.min(maxMinutes, minutes);
    if (hours === maxHr && minutes === maxMinutes)
      seconds = config.maxDate.getSeconds();
  }
  return { hours, minutes, seconds };
}

// node_modules/flatpickr/dist/esm/utils/polyfills.js
if (typeof Object.assign !== "function") {
  Object.assign = function(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (!target) {
      throw TypeError("Cannot convert undefined or null to object");
    }
    var _loop_1 = function(source2) {
      if (source2) {
        Object.keys(source2).forEach(function(key) {
          return target[key] = source2[key];
        });
      }
    };
    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
      var source = args_1[_a];
      _loop_1(source);
    }
    return target;
  };
}

// node_modules/flatpickr/dist/esm/index.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __spreadArrays = function() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
};
var DEBOUNCED_CHANGE_MS = 300;
function FlatpickrInstance(element, instanceConfig) {
  var self = {
    config: __assign(__assign({}, defaults), flatpickr.defaultConfig),
    l10n: default_default
  };
  self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  self._handlers = [];
  self.pluginElements = [];
  self.loadedPlugins = [];
  self._bind = bind;
  self._setHoursFromDate = setHoursFromDate;
  self._positionCalendar = positionCalendar;
  self.changeMonth = changeMonth;
  self.changeYear = changeYear;
  self.clear = clear;
  self.close = close;
  self.onMouseOver = onMouseOver;
  self._createElement = createElement;
  self.createDay = createDay;
  self.destroy = destroy;
  self.isEnabled = isEnabled;
  self.jumpToDate = jumpToDate;
  self.updateValue = updateValue;
  self.open = open;
  self.redraw = redraw;
  self.set = set;
  self.setDate = setDate;
  self.toggle = toggle;
  function setupHelperFunctions() {
    self.utils = {
      getDaysInMonth: function(month, yr) {
        if (month === void 0) {
          month = self.currentMonth;
        }
        if (yr === void 0) {
          yr = self.currentYear;
        }
        if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0))
          return 29;
        return self.l10n.daysInMonth[month];
      }
    };
  }
  function init() {
    self.element = self.input = element;
    self.isOpen = false;
    parseConfig();
    setupLocale();
    setupInputs();
    setupDates();
    setupHelperFunctions();
    if (!self.isMobile)
      build();
    bindEvents();
    if (self.selectedDates.length || self.config.noCalendar) {
      if (self.config.enableTime) {
        setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : void 0);
      }
      updateValue(false);
    }
    setCalendarWidth();
    var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    if (!self.isMobile && isSafari) {
      positionCalendar();
    }
    triggerEvent("onReady");
  }
  function getClosestActiveElement() {
    var _a;
    return ((_a = self.calendarContainer) === null || _a === void 0 ? void 0 : _a.getRootNode()).activeElement || document.activeElement;
  }
  function bindToInstance(fn) {
    return fn.bind(self);
  }
  function setCalendarWidth() {
    var config = self.config;
    if (config.weekNumbers === false && config.showMonths === 1) {
      return;
    } else if (config.noCalendar !== true) {
      window.requestAnimationFrame(function() {
        if (self.calendarContainer !== void 0) {
          self.calendarContainer.style.visibility = "hidden";
          self.calendarContainer.style.display = "block";
        }
        if (self.daysContainer !== void 0) {
          var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
          self.daysContainer.style.width = daysWidth + "px";
          self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== void 0 ? self.weekWrapper.offsetWidth : 0) + "px";
          self.calendarContainer.style.removeProperty("visibility");
          self.calendarContainer.style.removeProperty("display");
        }
      });
    }
  }
  function updateTime(e) {
    if (self.selectedDates.length === 0) {
      var defaultDate = self.config.minDate === void 0 || compareDates(/* @__PURE__ */ new Date(), self.config.minDate) >= 0 ? /* @__PURE__ */ new Date() : new Date(self.config.minDate.getTime());
      var defaults2 = getDefaultHours(self.config);
      defaultDate.setHours(defaults2.hours, defaults2.minutes, defaults2.seconds, defaultDate.getMilliseconds());
      self.selectedDates = [defaultDate];
      self.latestSelectedDateObj = defaultDate;
    }
    if (e !== void 0 && e.type !== "blur") {
      timeWrapper(e);
    }
    var prevValue = self._input.value;
    setHoursFromInputs();
    updateValue();
    if (self._input.value !== prevValue) {
      self._debouncedChange();
    }
  }
  function ampm2military(hour, amPM) {
    return hour % 12 + 12 * int(amPM === self.l10n.amPM[1]);
  }
  function military2ampm(hour) {
    switch (hour % 24) {
      case 0:
      case 12:
        return 12;
      default:
        return hour % 12;
    }
  }
  function setHoursFromInputs() {
    if (self.hourElement === void 0 || self.minuteElement === void 0)
      return;
    var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== void 0 ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
    if (self.amPM !== void 0) {
      hours = ampm2military(hours, self.amPM.textContent);
    }
    var limitMinHours = self.config.minTime !== void 0 || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;
    var limitMaxHours = self.config.maxTime !== void 0 || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;
    if (self.config.maxTime !== void 0 && self.config.minTime !== void 0 && self.config.minTime > self.config.maxTime) {
      var minBound = calculateSecondsSinceMidnight(self.config.minTime.getHours(), self.config.minTime.getMinutes(), self.config.minTime.getSeconds());
      var maxBound = calculateSecondsSinceMidnight(self.config.maxTime.getHours(), self.config.maxTime.getMinutes(), self.config.maxTime.getSeconds());
      var currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
      if (currentTime > maxBound && currentTime < minBound) {
        var result = parseSeconds(minBound);
        hours = result[0];
        minutes = result[1];
        seconds = result[2];
      }
    } else {
      if (limitMaxHours) {
        var maxTime2 = self.config.maxTime !== void 0 ? self.config.maxTime : self.config.maxDate;
        hours = Math.min(hours, maxTime2.getHours());
        if (hours === maxTime2.getHours())
          minutes = Math.min(minutes, maxTime2.getMinutes());
        if (minutes === maxTime2.getMinutes())
          seconds = Math.min(seconds, maxTime2.getSeconds());
      }
      if (limitMinHours) {
        var minTime2 = self.config.minTime !== void 0 ? self.config.minTime : self.config.minDate;
        hours = Math.max(hours, minTime2.getHours());
        if (hours === minTime2.getHours() && minutes < minTime2.getMinutes())
          minutes = minTime2.getMinutes();
        if (minutes === minTime2.getMinutes())
          seconds = Math.max(seconds, minTime2.getSeconds());
      }
    }
    setHours(hours, minutes, seconds);
  }
  function setHoursFromDate(dateObj) {
    var date = dateObj || self.latestSelectedDateObj;
    if (date && date instanceof Date) {
      setHours(date.getHours(), date.getMinutes(), date.getSeconds());
    }
  }
  function setHours(hours, minutes, seconds) {
    if (self.latestSelectedDateObj !== void 0) {
      self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
    }
    if (!self.hourElement || !self.minuteElement || self.isMobile)
      return;
    self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);
    self.minuteElement.value = pad(minutes);
    if (self.amPM !== void 0)
      self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
    if (self.secondElement !== void 0)
      self.secondElement.value = pad(seconds);
  }
  function onYearInput(event) {
    var eventTarget = getEventTarget(event);
    var year = parseInt(eventTarget.value) + (event.delta || 0);
    if (year / 1e3 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) {
      changeYear(year);
    }
  }
  function bind(element2, event, handler, options) {
    if (event instanceof Array)
      return event.forEach(function(ev) {
        return bind(element2, ev, handler, options);
      });
    if (element2 instanceof Array)
      return element2.forEach(function(el) {
        return bind(el, event, handler, options);
      });
    element2.addEventListener(event, handler, options);
    self._handlers.push({
      remove: function() {
        return element2.removeEventListener(event, handler, options);
      }
    });
  }
  function triggerChange() {
    triggerEvent("onChange");
  }
  function bindEvents() {
    if (self.config.wrap) {
      ["open", "close", "toggle", "clear"].forEach(function(evt) {
        Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function(el) {
          return bind(el, "click", self[evt]);
        });
      });
    }
    if (self.isMobile) {
      setupMobile();
      return;
    }
    var debouncedResize = debounce(onResize, 50);
    self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);
    if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
      bind(self.daysContainer, "mouseover", function(e) {
        if (self.config.mode === "range")
          onMouseOver(getEventTarget(e));
      });
    bind(self._input, "keydown", onKeyDown);
    if (self.calendarContainer !== void 0) {
      bind(self.calendarContainer, "keydown", onKeyDown);
    }
    if (!self.config.inline && !self.config.static)
      bind(window, "resize", debouncedResize);
    if (window.ontouchstart !== void 0)
      bind(window.document, "touchstart", documentClick);
    else
      bind(window.document, "mousedown", documentClick);
    bind(window.document, "focus", documentClick, { capture: true });
    if (self.config.clickOpens === true) {
      bind(self._input, "focus", self.open);
      bind(self._input, "click", self.open);
    }
    if (self.daysContainer !== void 0) {
      bind(self.monthNav, "click", onMonthNavClick);
      bind(self.monthNav, ["keyup", "increment"], onYearInput);
      bind(self.daysContainer, "click", selectDate);
    }
    if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0) {
      var selText = function(e) {
        return getEventTarget(e).select();
      };
      bind(self.timeContainer, ["increment"], updateTime);
      bind(self.timeContainer, "blur", updateTime, { capture: true });
      bind(self.timeContainer, "click", timeIncrement);
      bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
      if (self.secondElement !== void 0)
        bind(self.secondElement, "focus", function() {
          return self.secondElement && self.secondElement.select();
        });
      if (self.amPM !== void 0) {
        bind(self.amPM, "click", function(e) {
          updateTime(e);
        });
      }
    }
    if (self.config.allowInput) {
      bind(self._input, "blur", onBlur);
    }
  }
  function jumpToDate(jumpDate, triggerChange2) {
    var jumpTo = jumpDate !== void 0 ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);
    var oldYear = self.currentYear;
    var oldMonth = self.currentMonth;
    try {
      if (jumpTo !== void 0) {
        self.currentYear = jumpTo.getFullYear();
        self.currentMonth = jumpTo.getMonth();
      }
    } catch (e) {
      e.message = "Invalid date supplied: " + jumpTo;
      self.config.errorHandler(e);
    }
    if (triggerChange2 && self.currentYear !== oldYear) {
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
    if (triggerChange2 && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
      triggerEvent("onMonthChange");
    }
    self.redraw();
  }
  function timeIncrement(e) {
    var eventTarget = getEventTarget(e);
    if (~eventTarget.className.indexOf("arrow"))
      incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
  }
  function incrementNumInput(e, delta, inputElem) {
    var target = e && getEventTarget(e);
    var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
    var event = createEvent("increment");
    event.delta = delta;
    input && input.dispatchEvent(event);
  }
  function build() {
    var fragment = window.document.createDocumentFragment();
    self.calendarContainer = createElement("div", "flatpickr-calendar");
    self.calendarContainer.tabIndex = -1;
    if (!self.config.noCalendar) {
      fragment.appendChild(buildMonthNav());
      self.innerContainer = createElement("div", "flatpickr-innerContainer");
      if (self.config.weekNumbers) {
        var _a = buildWeeks(), weekWrapper = _a.weekWrapper, weekNumbers = _a.weekNumbers;
        self.innerContainer.appendChild(weekWrapper);
        self.weekNumbers = weekNumbers;
        self.weekWrapper = weekWrapper;
      }
      self.rContainer = createElement("div", "flatpickr-rContainer");
      self.rContainer.appendChild(buildWeekdays());
      if (!self.daysContainer) {
        self.daysContainer = createElement("div", "flatpickr-days");
        self.daysContainer.tabIndex = -1;
      }
      buildDays();
      self.rContainer.appendChild(self.daysContainer);
      self.innerContainer.appendChild(self.rContainer);
      fragment.appendChild(self.innerContainer);
    }
    if (self.config.enableTime) {
      fragment.appendChild(buildTime());
    }
    toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
    toggleClass(self.calendarContainer, "animate", self.config.animate === true);
    toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
    self.calendarContainer.appendChild(fragment);
    var customAppend = self.config.appendTo !== void 0 && self.config.appendTo.nodeType !== void 0;
    if (self.config.inline || self.config.static) {
      self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
      if (self.config.inline) {
        if (!customAppend && self.element.parentNode)
          self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
        else if (self.config.appendTo !== void 0)
          self.config.appendTo.appendChild(self.calendarContainer);
      }
      if (self.config.static) {
        var wrapper = createElement("div", "flatpickr-wrapper");
        if (self.element.parentNode)
          self.element.parentNode.insertBefore(wrapper, self.element);
        wrapper.appendChild(self.element);
        if (self.altInput)
          wrapper.appendChild(self.altInput);
        wrapper.appendChild(self.calendarContainer);
      }
    }
    if (!self.config.static && !self.config.inline)
      (self.config.appendTo !== void 0 ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
  }
  function createDay(className, date, _dayNumber, i) {
    var dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", className, date.getDate().toString());
    dayElement.dateObj = date;
    dayElement.$i = i;
    dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
    if (className.indexOf("hidden") === -1 && compareDates(date, self.now) === 0) {
      self.todayDateElem = dayElement;
      dayElement.classList.add("today");
      dayElement.setAttribute("aria-current", "date");
    }
    if (dateIsEnabled) {
      dayElement.tabIndex = -1;
      if (isDateSelected(date)) {
        dayElement.classList.add("selected");
        self.selectedDateElem = dayElement;
        if (self.config.mode === "range") {
          toggleClass(dayElement, "startRange", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);
          toggleClass(dayElement, "endRange", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);
          if (className === "nextMonthDay")
            dayElement.classList.add("inRange");
        }
      }
    } else {
      dayElement.classList.add("flatpickr-disabled");
    }
    if (self.config.mode === "range") {
      if (isDateInRange(date) && !isDateSelected(date))
        dayElement.classList.add("inRange");
    }
    if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && i % 7 === 6) {
      self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
    }
    triggerEvent("onDayCreate", dayElement);
    return dayElement;
  }
  function focusOnDayElem(targetNode) {
    targetNode.focus();
    if (self.config.mode === "range")
      onMouseOver(targetNode);
  }
  function getFirstAvailableDay(delta) {
    var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
    var endMonth = delta > 0 ? self.config.showMonths : -1;
    for (var m = startMonth; m != endMonth; m += delta) {
      var month = self.daysContainer.children[m];
      var startIndex = delta > 0 ? 0 : month.children.length - 1;
      var endIndex = delta > 0 ? month.children.length : -1;
      for (var i = startIndex; i != endIndex; i += delta) {
        var c = month.children[i];
        if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
          return c;
      }
    }
    return void 0;
  }
  function getNextAvailableDay(current, delta) {
    var givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self.currentMonth;
    var endMonth = delta > 0 ? self.config.showMonths : -1;
    var loopDelta = delta > 0 ? 1 : -1;
    for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
      var month = self.daysContainer.children[m];
      var startIndex = givenMonth - self.currentMonth === m ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
      var numMonthDays = month.children.length;
      for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
        var c = month.children[i];
        if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj) && Math.abs(current.$i - i) >= Math.abs(delta))
          return focusOnDayElem(c);
      }
    }
    self.changeMonth(loopDelta);
    focusOnDay(getFirstAvailableDay(loopDelta), 0);
    return void 0;
  }
  function focusOnDay(current, offset) {
    var activeElement = getClosestActiveElement();
    var dayFocused = isInView(activeElement || document.body);
    var startElem = current !== void 0 ? current : dayFocused ? activeElement : self.selectedDateElem !== void 0 && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== void 0 && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset > 0 ? 1 : -1);
    if (startElem === void 0) {
      self._input.focus();
    } else if (!dayFocused) {
      focusOnDayElem(startElem);
    } else {
      getNextAvailableDay(startElem, offset);
    }
  }
  function buildMonthDays(year, month) {
    var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
    var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
    var daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
    var dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
    for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day " + prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
    }
    for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day", new Date(year, month, dayNumber), dayNumber, dayIndex));
    }
    for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
      days.appendChild(createDay("flatpickr-day " + nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
    }
    var dayContainer = createElement("div", "dayContainer");
    dayContainer.appendChild(days);
    return dayContainer;
  }
  function buildDays() {
    if (self.daysContainer === void 0) {
      return;
    }
    clearNode(self.daysContainer);
    if (self.weekNumbers)
      clearNode(self.weekNumbers);
    var frag = document.createDocumentFragment();
    for (var i = 0; i < self.config.showMonths; i++) {
      var d = new Date(self.currentYear, self.currentMonth, 1);
      d.setMonth(self.currentMonth + i);
      frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
    }
    self.daysContainer.appendChild(frag);
    self.days = self.daysContainer.firstChild;
    if (self.config.mode === "range" && self.selectedDates.length === 1) {
      onMouseOver();
    }
  }
  function buildMonthSwitch() {
    if (self.config.showMonths > 1 || self.config.monthSelectorType !== "dropdown")
      return;
    var shouldBuildMonth = function(month2) {
      if (self.config.minDate !== void 0 && self.currentYear === self.config.minDate.getFullYear() && month2 < self.config.minDate.getMonth()) {
        return false;
      }
      return !(self.config.maxDate !== void 0 && self.currentYear === self.config.maxDate.getFullYear() && month2 > self.config.maxDate.getMonth());
    };
    self.monthsDropdownContainer.tabIndex = -1;
    self.monthsDropdownContainer.innerHTML = "";
    for (var i = 0; i < 12; i++) {
      if (!shouldBuildMonth(i))
        continue;
      var month = createElement("option", "flatpickr-monthDropdown-month");
      month.value = new Date(self.currentYear, i).getMonth().toString();
      month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
      month.tabIndex = -1;
      if (self.currentMonth === i) {
        month.selected = true;
      }
      self.monthsDropdownContainer.appendChild(month);
    }
  }
  function buildMonth() {
    var container = createElement("div", "flatpickr-month");
    var monthNavFragment = window.document.createDocumentFragment();
    var monthElement;
    if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
      monthElement = createElement("span", "cur-month");
    } else {
      self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
      self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
      bind(self.monthsDropdownContainer, "change", function(e) {
        var target = getEventTarget(e);
        var selectedMonth = parseInt(target.value, 10);
        self.changeMonth(selectedMonth - self.currentMonth);
        triggerEvent("onMonthChange");
      });
      buildMonthSwitch();
      monthElement = self.monthsDropdownContainer;
    }
    var yearInput = createNumberInput("cur-year", { tabindex: "-1" });
    var yearElement = yearInput.getElementsByTagName("input")[0];
    yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
    if (self.config.minDate) {
      yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
    }
    if (self.config.maxDate) {
      yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
      yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
    }
    var currentMonth = createElement("div", "flatpickr-current-month");
    currentMonth.appendChild(monthElement);
    currentMonth.appendChild(yearInput);
    monthNavFragment.appendChild(currentMonth);
    container.appendChild(monthNavFragment);
    return {
      container,
      yearElement,
      monthElement
    };
  }
  function buildMonths() {
    clearNode(self.monthNav);
    self.monthNav.appendChild(self.prevMonthNav);
    if (self.config.showMonths) {
      self.yearElements = [];
      self.monthElements = [];
    }
    for (var m = self.config.showMonths; m--; ) {
      var month = buildMonth();
      self.yearElements.push(month.yearElement);
      self.monthElements.push(month.monthElement);
      self.monthNav.appendChild(month.container);
    }
    self.monthNav.appendChild(self.nextMonthNav);
  }
  function buildMonthNav() {
    self.monthNav = createElement("div", "flatpickr-months");
    self.yearElements = [];
    self.monthElements = [];
    self.prevMonthNav = createElement("span", "flatpickr-prev-month");
    self.prevMonthNav.innerHTML = self.config.prevArrow;
    self.nextMonthNav = createElement("span", "flatpickr-next-month");
    self.nextMonthNav.innerHTML = self.config.nextArrow;
    buildMonths();
    Object.defineProperty(self, "_hidePrevMonthArrow", {
      get: function() {
        return self.__hidePrevMonthArrow;
      },
      set: function(bool) {
        if (self.__hidePrevMonthArrow !== bool) {
          toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
          self.__hidePrevMonthArrow = bool;
        }
      }
    });
    Object.defineProperty(self, "_hideNextMonthArrow", {
      get: function() {
        return self.__hideNextMonthArrow;
      },
      set: function(bool) {
        if (self.__hideNextMonthArrow !== bool) {
          toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
          self.__hideNextMonthArrow = bool;
        }
      }
    });
    self.currentYearElement = self.yearElements[0];
    updateNavigationCurrentMonth();
    return self.monthNav;
  }
  function buildTime() {
    self.calendarContainer.classList.add("hasTime");
    if (self.config.noCalendar)
      self.calendarContainer.classList.add("noCalendar");
    var defaults2 = getDefaultHours(self.config);
    self.timeContainer = createElement("div", "flatpickr-time");
    self.timeContainer.tabIndex = -1;
    var separator = createElement("span", "flatpickr-time-separator", ":");
    var hourInput = createNumberInput("flatpickr-hour", {
      "aria-label": self.l10n.hourAriaLabel
    });
    self.hourElement = hourInput.getElementsByTagName("input")[0];
    var minuteInput = createNumberInput("flatpickr-minute", {
      "aria-label": self.l10n.minuteAriaLabel
    });
    self.minuteElement = minuteInput.getElementsByTagName("input")[0];
    self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
    self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? defaults2.hours : military2ampm(defaults2.hours));
    self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : defaults2.minutes);
    self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
    self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
    self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
    self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
    self.hourElement.setAttribute("maxlength", "2");
    self.minuteElement.setAttribute("min", "0");
    self.minuteElement.setAttribute("max", "59");
    self.minuteElement.setAttribute("maxlength", "2");
    self.timeContainer.appendChild(hourInput);
    self.timeContainer.appendChild(separator);
    self.timeContainer.appendChild(minuteInput);
    if (self.config.time_24hr)
      self.timeContainer.classList.add("time24hr");
    if (self.config.enableSeconds) {
      self.timeContainer.classList.add("hasSeconds");
      var secondInput = createNumberInput("flatpickr-second");
      self.secondElement = secondInput.getElementsByTagName("input")[0];
      self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : defaults2.seconds);
      self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
      self.secondElement.setAttribute("min", "0");
      self.secondElement.setAttribute("max", "59");
      self.secondElement.setAttribute("maxlength", "2");
      self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
      self.timeContainer.appendChild(secondInput);
    }
    if (!self.config.time_24hr) {
      self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
      self.amPM.title = self.l10n.toggleTitle;
      self.amPM.tabIndex = -1;
      self.timeContainer.appendChild(self.amPM);
    }
    return self.timeContainer;
  }
  function buildWeekdays() {
    if (!self.weekdayContainer)
      self.weekdayContainer = createElement("div", "flatpickr-weekdays");
    else
      clearNode(self.weekdayContainer);
    for (var i = self.config.showMonths; i--; ) {
      var container = createElement("div", "flatpickr-weekdaycontainer");
      self.weekdayContainer.appendChild(container);
    }
    updateWeekdays();
    return self.weekdayContainer;
  }
  function updateWeekdays() {
    if (!self.weekdayContainer) {
      return;
    }
    var firstDayOfWeek = self.l10n.firstDayOfWeek;
    var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);
    if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
      weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
    }
    for (var i = self.config.showMonths; i--; ) {
      self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
    }
  }
  function buildWeeks() {
    self.calendarContainer.classList.add("hasWeeks");
    var weekWrapper = createElement("div", "flatpickr-weekwrapper");
    weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
    var weekNumbers = createElement("div", "flatpickr-weeks");
    weekWrapper.appendChild(weekNumbers);
    return {
      weekWrapper,
      weekNumbers
    };
  }
  function changeMonth(value, isOffset) {
    if (isOffset === void 0) {
      isOffset = true;
    }
    var delta = isOffset ? value : value - self.currentMonth;
    if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true)
      return;
    self.currentMonth += delta;
    if (self.currentMonth < 0 || self.currentMonth > 11) {
      self.currentYear += self.currentMonth > 11 ? 1 : -1;
      self.currentMonth = (self.currentMonth + 12) % 12;
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
    buildDays();
    triggerEvent("onMonthChange");
    updateNavigationCurrentMonth();
  }
  function clear(triggerChangeEvent, toInitial) {
    if (triggerChangeEvent === void 0) {
      triggerChangeEvent = true;
    }
    if (toInitial === void 0) {
      toInitial = true;
    }
    self.input.value = "";
    if (self.altInput !== void 0)
      self.altInput.value = "";
    if (self.mobileInput !== void 0)
      self.mobileInput.value = "";
    self.selectedDates = [];
    self.latestSelectedDateObj = void 0;
    if (toInitial === true) {
      self.currentYear = self._initialDate.getFullYear();
      self.currentMonth = self._initialDate.getMonth();
    }
    if (self.config.enableTime === true) {
      var _a = getDefaultHours(self.config), hours = _a.hours, minutes = _a.minutes, seconds = _a.seconds;
      setHours(hours, minutes, seconds);
    }
    self.redraw();
    if (triggerChangeEvent)
      triggerEvent("onChange");
  }
  function close() {
    self.isOpen = false;
    if (!self.isMobile) {
      if (self.calendarContainer !== void 0) {
        self.calendarContainer.classList.remove("open");
      }
      if (self._input !== void 0) {
        self._input.classList.remove("active");
      }
    }
    triggerEvent("onClose");
  }
  function destroy() {
    if (self.config !== void 0)
      triggerEvent("onDestroy");
    for (var i = self._handlers.length; i--; ) {
      self._handlers[i].remove();
    }
    self._handlers = [];
    if (self.mobileInput) {
      if (self.mobileInput.parentNode)
        self.mobileInput.parentNode.removeChild(self.mobileInput);
      self.mobileInput = void 0;
    } else if (self.calendarContainer && self.calendarContainer.parentNode) {
      if (self.config.static && self.calendarContainer.parentNode) {
        var wrapper = self.calendarContainer.parentNode;
        wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
        if (wrapper.parentNode) {
          while (wrapper.firstChild)
            wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
          wrapper.parentNode.removeChild(wrapper);
        }
      } else
        self.calendarContainer.parentNode.removeChild(self.calendarContainer);
    }
    if (self.altInput) {
      self.input.type = "text";
      if (self.altInput.parentNode)
        self.altInput.parentNode.removeChild(self.altInput);
      delete self.altInput;
    }
    if (self.input) {
      self.input.type = self.input._type;
      self.input.classList.remove("flatpickr-input");
      self.input.removeAttribute("readonly");
    }
    [
      "_showTimeInput",
      "latestSelectedDateObj",
      "_hideNextMonthArrow",
      "_hidePrevMonthArrow",
      "__hideNextMonthArrow",
      "__hidePrevMonthArrow",
      "isMobile",
      "isOpen",
      "selectedDateElem",
      "minDateHasTime",
      "maxDateHasTime",
      "days",
      "daysContainer",
      "_input",
      "_positionElement",
      "innerContainer",
      "rContainer",
      "monthNav",
      "todayDateElem",
      "calendarContainer",
      "weekdayContainer",
      "prevMonthNav",
      "nextMonthNav",
      "monthsDropdownContainer",
      "currentMonthElement",
      "currentYearElement",
      "navigationCurrentMonth",
      "selectedDateElem",
      "config"
    ].forEach(function(k) {
      try {
        delete self[k];
      } catch (_) {
      }
    });
  }
  function isCalendarElem(elem) {
    return self.calendarContainer.contains(elem);
  }
  function documentClick(e) {
    if (self.isOpen && !self.config.inline) {
      var eventTarget_1 = getEventTarget(e);
      var isCalendarElement = isCalendarElem(eventTarget_1);
      var isInput = eventTarget_1 === self.input || eventTarget_1 === self.altInput || self.element.contains(eventTarget_1) || e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));
      var lostFocus = !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget);
      var isIgnored = !self.config.ignoredFocusElements.some(function(elem) {
        return elem.contains(eventTarget_1);
      });
      if (lostFocus && isIgnored) {
        if (self.config.allowInput) {
          self.setDate(self._input.value, false, self.config.altInput ? self.config.altFormat : self.config.dateFormat);
        }
        if (self.timeContainer !== void 0 && self.minuteElement !== void 0 && self.hourElement !== void 0 && self.input.value !== "" && self.input.value !== void 0) {
          updateTime();
        }
        self.close();
        if (self.config && self.config.mode === "range" && self.selectedDates.length === 1)
          self.clear(false);
      }
    }
  }
  function changeYear(newYear) {
    if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear())
      return;
    var newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
    self.currentYear = newYearNum || self.currentYear;
    if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {
      self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
    } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {
      self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
    }
    if (isNewYear) {
      self.redraw();
      triggerEvent("onYearChange");
      buildMonthSwitch();
    }
  }
  function isEnabled(date, timeless) {
    var _a;
    if (timeless === void 0) {
      timeless = true;
    }
    var dateToCheck = self.parseDate(date, void 0, timeless);
    if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== void 0 ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== void 0 ? timeless : !self.maxDateHasTime) > 0)
      return false;
    if (!self.config.enable && self.config.disable.length === 0)
      return true;
    if (dateToCheck === void 0)
      return false;
    var bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
    for (var i = 0, d = void 0; i < array.length; i++) {
      d = array[i];
      if (typeof d === "function" && d(dateToCheck))
        return bool;
      else if (d instanceof Date && dateToCheck !== void 0 && d.getTime() === dateToCheck.getTime())
        return bool;
      else if (typeof d === "string") {
        var parsed = self.parseDate(d, void 0, true);
        return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
      } else if (typeof d === "object" && dateToCheck !== void 0 && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime())
        return bool;
    }
    return !bool;
  }
  function isInView(elem) {
    if (self.daysContainer !== void 0)
      return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self.daysContainer.contains(elem);
    return false;
  }
  function onBlur(e) {
    var isInput = e.target === self._input;
    var valueChanged = self._input.value.trimEnd() !== getDateStr();
    if (isInput && valueChanged && !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
      self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
    }
  }
  function onKeyDown(e) {
    var eventTarget = getEventTarget(e);
    var isInput = self.config.wrap ? element.contains(eventTarget) : eventTarget === self._input;
    var allowInput = self.config.allowInput;
    var allowKeydown = self.isOpen && (!allowInput || !isInput);
    var allowInlineKeydown = self.config.inline && isInput && !allowInput;
    if (e.keyCode === 13 && isInput) {
      if (allowInput) {
        self.setDate(self._input.value, true, eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat);
        self.close();
        return eventTarget.blur();
      } else {
        self.open();
      }
    } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
      var isTimeObj = !!self.timeContainer && self.timeContainer.contains(eventTarget);
      switch (e.keyCode) {
        case 13:
          if (isTimeObj) {
            e.preventDefault();
            updateTime();
            focusAndClose();
          } else
            selectDate(e);
          break;
        case 27:
          e.preventDefault();
          focusAndClose();
          break;
        case 8:
        case 46:
          if (isInput && !self.config.allowInput) {
            e.preventDefault();
            self.clear();
          }
          break;
        case 37:
        case 39:
          if (!isTimeObj && !isInput) {
            e.preventDefault();
            var activeElement = getClosestActiveElement();
            if (self.daysContainer !== void 0 && (allowInput === false || activeElement && isInView(activeElement))) {
              var delta_1 = e.keyCode === 39 ? 1 : -1;
              if (!e.ctrlKey)
                focusOnDay(void 0, delta_1);
              else {
                e.stopPropagation();
                changeMonth(delta_1);
                focusOnDay(getFirstAvailableDay(1), 0);
              }
            }
          } else if (self.hourElement)
            self.hourElement.focus();
          break;
        case 38:
        case 40:
          e.preventDefault();
          var delta = e.keyCode === 40 ? 1 : -1;
          if (self.daysContainer && eventTarget.$i !== void 0 || eventTarget === self.input || eventTarget === self.altInput) {
            if (e.ctrlKey) {
              e.stopPropagation();
              changeYear(self.currentYear - delta);
              focusOnDay(getFirstAvailableDay(1), 0);
            } else if (!isTimeObj)
              focusOnDay(void 0, delta * 7);
          } else if (eventTarget === self.currentYearElement) {
            changeYear(self.currentYear - delta);
          } else if (self.config.enableTime) {
            if (!isTimeObj && self.hourElement)
              self.hourElement.focus();
            updateTime(e);
            self._debouncedChange();
          }
          break;
        case 9:
          if (isTimeObj) {
            var elems = [
              self.hourElement,
              self.minuteElement,
              self.secondElement,
              self.amPM
            ].concat(self.pluginElements).filter(function(x) {
              return x;
            });
            var i = elems.indexOf(eventTarget);
            if (i !== -1) {
              var target = elems[i + (e.shiftKey ? -1 : 1)];
              e.preventDefault();
              (target || self._input).focus();
            }
          } else if (!self.config.noCalendar && self.daysContainer && self.daysContainer.contains(eventTarget) && e.shiftKey) {
            e.preventDefault();
            self._input.focus();
          }
          break;
        default:
          break;
      }
    }
    if (self.amPM !== void 0 && eventTarget === self.amPM) {
      switch (e.key) {
        case self.l10n.amPM[0].charAt(0):
        case self.l10n.amPM[0].charAt(0).toLowerCase():
          self.amPM.textContent = self.l10n.amPM[0];
          setHoursFromInputs();
          updateValue();
          break;
        case self.l10n.amPM[1].charAt(0):
        case self.l10n.amPM[1].charAt(0).toLowerCase():
          self.amPM.textContent = self.l10n.amPM[1];
          setHoursFromInputs();
          updateValue();
          break;
      }
    }
    if (isInput || isCalendarElem(eventTarget)) {
      triggerEvent("onKeyDown", e);
    }
  }
  function onMouseOver(elem, cellClass) {
    if (cellClass === void 0) {
      cellClass = "flatpickr-day";
    }
    if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains(cellClass) || elem.classList.contains("flatpickr-disabled")))
      return;
    var hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], void 0, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
    var containsDisabled = false;
    var minRange = 0, maxRange = 0;
    for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
      if (!isEnabled(new Date(t), true)) {
        containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;
        if (t < initialDate && (!minRange || t > minRange))
          minRange = t;
        else if (t > initialDate && (!maxRange || t < maxRange))
          maxRange = t;
      }
    }
    var hoverableCells = Array.from(self.rContainer.querySelectorAll("*:nth-child(-n+" + self.config.showMonths + ") > ." + cellClass));
    hoverableCells.forEach(function(dayElem) {
      var date = dayElem.dateObj;
      var timestamp = date.getTime();
      var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;
      if (outOfRange) {
        dayElem.classList.add("notAllowed");
        ["inRange", "startRange", "endRange"].forEach(function(c) {
          dayElem.classList.remove(c);
        });
        return;
      } else if (containsDisabled && !outOfRange)
        return;
      ["startRange", "inRange", "endRange", "notAllowed"].forEach(function(c) {
        dayElem.classList.remove(c);
      });
      if (elem !== void 0) {
        elem.classList.add(hoverDate <= self.selectedDates[0].getTime() ? "startRange" : "endRange");
        if (initialDate < hoverDate && timestamp === initialDate)
          dayElem.classList.add("startRange");
        else if (initialDate > hoverDate && timestamp === initialDate)
          dayElem.classList.add("endRange");
        if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate))
          dayElem.classList.add("inRange");
      }
    });
  }
  function onResize() {
    if (self.isOpen && !self.config.static && !self.config.inline)
      positionCalendar();
  }
  function open(e, positionElement) {
    if (positionElement === void 0) {
      positionElement = self._positionElement;
    }
    if (self.isMobile === true) {
      if (e) {
        e.preventDefault();
        var eventTarget = getEventTarget(e);
        if (eventTarget) {
          eventTarget.blur();
        }
      }
      if (self.mobileInput !== void 0) {
        self.mobileInput.focus();
        self.mobileInput.click();
      }
      triggerEvent("onOpen");
      return;
    } else if (self._input.disabled || self.config.inline) {
      return;
    }
    var wasOpen = self.isOpen;
    self.isOpen = true;
    if (!wasOpen) {
      self.calendarContainer.classList.add("open");
      self._input.classList.add("active");
      triggerEvent("onOpen");
      positionCalendar(positionElement);
    }
    if (self.config.enableTime === true && self.config.noCalendar === true) {
      if (self.config.allowInput === false && (e === void 0 || !self.timeContainer.contains(e.relatedTarget))) {
        setTimeout(function() {
          return self.hourElement.select();
        }, 50);
      }
    }
  }
  function minMaxDateSetter(type) {
    return function(date) {
      var dateObj = self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat);
      var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];
      if (dateObj !== void 0) {
        self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
      }
      if (self.selectedDates) {
        self.selectedDates = self.selectedDates.filter(function(d) {
          return isEnabled(d);
        });
        if (!self.selectedDates.length && type === "min")
          setHoursFromDate(dateObj);
        updateValue();
      }
      if (self.daysContainer) {
        redraw();
        if (dateObj !== void 0)
          self.currentYearElement[type] = dateObj.getFullYear().toString();
        else
          self.currentYearElement.removeAttribute(type);
        self.currentYearElement.disabled = !!inverseDateObj && dateObj !== void 0 && inverseDateObj.getFullYear() === dateObj.getFullYear();
      }
    };
  }
  function parseConfig() {
    var boolOpts = [
      "wrap",
      "weekNumbers",
      "allowInput",
      "allowInvalidPreload",
      "clickOpens",
      "time_24hr",
      "enableTime",
      "noCalendar",
      "altInput",
      "shorthandCurrentMonth",
      "inline",
      "static",
      "enableSeconds",
      "disableMobile"
    ];
    var userConfig = __assign(__assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
    var formats2 = {};
    self.config.parseDate = userConfig.parseDate;
    self.config.formatDate = userConfig.formatDate;
    Object.defineProperty(self.config, "enable", {
      get: function() {
        return self.config._enable;
      },
      set: function(dates) {
        self.config._enable = parseDateRules(dates);
      }
    });
    Object.defineProperty(self.config, "disable", {
      get: function() {
        return self.config._disable;
      },
      set: function(dates) {
        self.config._disable = parseDateRules(dates);
      }
    });
    var timeMode = userConfig.mode === "time";
    if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
      var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
      formats2.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
    }
    if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
      var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
      formats2.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
    }
    Object.defineProperty(self.config, "minDate", {
      get: function() {
        return self.config._minDate;
      },
      set: minMaxDateSetter("min")
    });
    Object.defineProperty(self.config, "maxDate", {
      get: function() {
        return self.config._maxDate;
      },
      set: minMaxDateSetter("max")
    });
    var minMaxTimeSetter = function(type) {
      return function(val) {
        self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
      };
    };
    Object.defineProperty(self.config, "minTime", {
      get: function() {
        return self.config._minTime;
      },
      set: minMaxTimeSetter("min")
    });
    Object.defineProperty(self.config, "maxTime", {
      get: function() {
        return self.config._maxTime;
      },
      set: minMaxTimeSetter("max")
    });
    if (userConfig.mode === "time") {
      self.config.noCalendar = true;
      self.config.enableTime = true;
    }
    Object.assign(self.config, formats2, userConfig);
    for (var i = 0; i < boolOpts.length; i++)
      self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === "true";
    HOOKS.filter(function(hook) {
      return self.config[hook] !== void 0;
    }).forEach(function(hook) {
      self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
    });
    self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    for (var i = 0; i < self.config.plugins.length; i++) {
      var pluginConf = self.config.plugins[i](self) || {};
      for (var key in pluginConf) {
        if (HOOKS.indexOf(key) > -1) {
          self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
        } else if (typeof userConfig[key] === "undefined")
          self.config[key] = pluginConf[key];
      }
    }
    if (!userConfig.altInputClass) {
      self.config.altInputClass = getInputElem().className + " " + self.config.altInputClass;
    }
    triggerEvent("onParseConfig");
  }
  function getInputElem() {
    return self.config.wrap ? element.querySelector("[data-input]") : element;
  }
  function setupLocale() {
    if (typeof self.config.locale !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined")
      self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
    self.l10n = __assign(__assign({}, flatpickr.l10ns.default), typeof self.config.locale === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : void 0);
    tokenRegex.D = "(" + self.l10n.weekdays.shorthand.join("|") + ")";
    tokenRegex.l = "(" + self.l10n.weekdays.longhand.join("|") + ")";
    tokenRegex.M = "(" + self.l10n.months.shorthand.join("|") + ")";
    tokenRegex.F = "(" + self.l10n.months.longhand.join("|") + ")";
    tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";
    var userConfig = __assign(__assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
    if (userConfig.time_24hr === void 0 && flatpickr.defaultConfig.time_24hr === void 0) {
      self.config.time_24hr = self.l10n.time_24hr;
    }
    self.formatDate = createDateFormatter(self);
    self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  }
  function positionCalendar(customPositionElement) {
    if (typeof self.config.position === "function") {
      return void self.config.position(self, customPositionElement);
    }
    if (self.calendarContainer === void 0)
      return;
    triggerEvent("onPreCalendarPosition");
    var positionElement = customPositionElement || self._positionElement;
    var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, (function(acc, child) {
      return acc + child.offsetHeight;
    }), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
    var top = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
    toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
    toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
    if (self.config.inline)
      return;
    var left = window.pageXOffset + inputBounds.left;
    var isCenter = false;
    var isRight = false;
    if (configPosHorizontal === "center") {
      left -= (calendarWidth - inputBounds.width) / 2;
      isCenter = true;
    } else if (configPosHorizontal === "right") {
      left -= calendarWidth - inputBounds.width;
      isRight = true;
    }
    toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
    toggleClass(self.calendarContainer, "arrowCenter", isCenter);
    toggleClass(self.calendarContainer, "arrowRight", isRight);
    var right = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
    var rightMost = left + calendarWidth > window.document.body.offsetWidth;
    var centerMost = right + calendarWidth > window.document.body.offsetWidth;
    toggleClass(self.calendarContainer, "rightMost", rightMost);
    if (self.config.static)
      return;
    self.calendarContainer.style.top = top + "px";
    if (!rightMost) {
      self.calendarContainer.style.left = left + "px";
      self.calendarContainer.style.right = "auto";
    } else if (!centerMost) {
      self.calendarContainer.style.left = "auto";
      self.calendarContainer.style.right = right + "px";
    } else {
      var doc = getDocumentStyleSheet();
      if (doc === void 0)
        return;
      var bodyWidth = window.document.body.offsetWidth;
      var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
      var centerBefore = ".flatpickr-calendar.centerMost:before";
      var centerAfter = ".flatpickr-calendar.centerMost:after";
      var centerIndex = doc.cssRules.length;
      var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
      toggleClass(self.calendarContainer, "rightMost", false);
      toggleClass(self.calendarContainer, "centerMost", true);
      doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
      self.calendarContainer.style.left = centerLeft + "px";
      self.calendarContainer.style.right = "auto";
    }
  }
  function getDocumentStyleSheet() {
    var editableSheet = null;
    for (var i = 0; i < document.styleSheets.length; i++) {
      var sheet = document.styleSheets[i];
      if (!sheet.cssRules)
        continue;
      try {
        sheet.cssRules;
      } catch (err) {
        continue;
      }
      editableSheet = sheet;
      break;
    }
    return editableSheet != null ? editableSheet : createStyleSheet();
  }
  function createStyleSheet() {
    var style = document.createElement("style");
    document.head.appendChild(style);
    return style.sheet;
  }
  function redraw() {
    if (self.config.noCalendar || self.isMobile)
      return;
    buildMonthSwitch();
    updateNavigationCurrentMonth();
    buildDays();
  }
  function focusAndClose() {
    self._input.focus();
    if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== void 0) {
      setTimeout(self.close, 0);
    } else {
      self.close();
    }
  }
  function selectDate(e) {
    e.preventDefault();
    e.stopPropagation();
    var isSelectable = function(day) {
      return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed");
    };
    var t = findParent(getEventTarget(e), isSelectable);
    if (t === void 0)
      return;
    var target = t;
    var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
    var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
    self.selectedDateElem = target;
    if (self.config.mode === "single")
      self.selectedDates = [selectedDate];
    else if (self.config.mode === "multiple") {
      var selectedIndex = isDateSelected(selectedDate);
      if (selectedIndex)
        self.selectedDates.splice(parseInt(selectedIndex), 1);
      else
        self.selectedDates.push(selectedDate);
    } else if (self.config.mode === "range") {
      if (self.selectedDates.length === 2) {
        self.clear(false, false);
      }
      self.latestSelectedDateObj = selectedDate;
      self.selectedDates.push(selectedDate);
      if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
        self.selectedDates.sort(function(a, b) {
          return a.getTime() - b.getTime();
        });
    }
    setHoursFromInputs();
    if (shouldChangeMonth) {
      var isNewYear = self.currentYear !== selectedDate.getFullYear();
      self.currentYear = selectedDate.getFullYear();
      self.currentMonth = selectedDate.getMonth();
      if (isNewYear) {
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
      triggerEvent("onMonthChange");
    }
    updateNavigationCurrentMonth();
    buildDays();
    updateValue();
    if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1)
      focusOnDayElem(target);
    else if (self.selectedDateElem !== void 0 && self.hourElement === void 0) {
      self.selectedDateElem && self.selectedDateElem.focus();
    }
    if (self.hourElement !== void 0)
      self.hourElement !== void 0 && self.hourElement.focus();
    if (self.config.closeOnSelect) {
      var single = self.config.mode === "single" && !self.config.enableTime;
      var range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;
      if (single || range) {
        focusAndClose();
      }
    }
    triggerChange();
  }
  var CALLBACKS = {
    locale: [setupLocale, updateWeekdays],
    showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
    minDate: [jumpToDate],
    maxDate: [jumpToDate],
    positionElement: [updatePositionElement],
    clickOpens: [
      function() {
        if (self.config.clickOpens === true) {
          bind(self._input, "focus", self.open);
          bind(self._input, "click", self.open);
        } else {
          self._input.removeEventListener("focus", self.open);
          self._input.removeEventListener("click", self.open);
        }
      }
    ]
  };
  function set(option, value) {
    if (option !== null && typeof option === "object") {
      Object.assign(self.config, option);
      for (var key in option) {
        if (CALLBACKS[key] !== void 0)
          CALLBACKS[key].forEach(function(x) {
            return x();
          });
      }
    } else {
      self.config[option] = value;
      if (CALLBACKS[option] !== void 0)
        CALLBACKS[option].forEach(function(x) {
          return x();
        });
      else if (HOOKS.indexOf(option) > -1)
        self.config[option] = arrayify(value);
    }
    self.redraw();
    updateValue(true);
  }
  function setSelectedDate(inputDate, format2) {
    var dates = [];
    if (inputDate instanceof Array)
      dates = inputDate.map(function(d) {
        return self.parseDate(d, format2);
      });
    else if (inputDate instanceof Date || typeof inputDate === "number")
      dates = [self.parseDate(inputDate, format2)];
    else if (typeof inputDate === "string") {
      switch (self.config.mode) {
        case "single":
        case "time":
          dates = [self.parseDate(inputDate, format2)];
          break;
        case "multiple":
          dates = inputDate.split(self.config.conjunction).map(function(date) {
            return self.parseDate(date, format2);
          });
          break;
        case "range":
          dates = inputDate.split(self.l10n.rangeSeparator).map(function(date) {
            return self.parseDate(date, format2);
          });
          break;
        default:
          break;
      }
    } else
      self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
    self.selectedDates = self.config.allowInvalidPreload ? dates : dates.filter(function(d) {
      return d instanceof Date && isEnabled(d, false);
    });
    if (self.config.mode === "range")
      self.selectedDates.sort(function(a, b) {
        return a.getTime() - b.getTime();
      });
  }
  function setDate(date, triggerChange2, format2) {
    if (triggerChange2 === void 0) {
      triggerChange2 = false;
    }
    if (format2 === void 0) {
      format2 = self.config.dateFormat;
    }
    if (date !== 0 && !date || date instanceof Array && date.length === 0)
      return self.clear(triggerChange2);
    setSelectedDate(date, format2);
    self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
    self.redraw();
    jumpToDate(void 0, triggerChange2);
    setHoursFromDate();
    if (self.selectedDates.length === 0) {
      self.clear(false);
    }
    updateValue(triggerChange2);
    if (triggerChange2)
      triggerEvent("onChange");
  }
  function parseDateRules(arr) {
    return arr.slice().map(function(rule) {
      if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) {
        return self.parseDate(rule, void 0, true);
      } else if (rule && typeof rule === "object" && rule.from && rule.to)
        return {
          from: self.parseDate(rule.from, void 0),
          to: self.parseDate(rule.to, void 0)
        };
      return rule;
    }).filter(function(x) {
      return x;
    });
  }
  function setupDates() {
    self.selectedDates = [];
    self.now = self.parseDate(self.config.now) || /* @__PURE__ */ new Date();
    var preloadedDate = self.config.defaultDate || ((self.input.nodeName === "INPUT" || self.input.nodeName === "TEXTAREA") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);
    if (preloadedDate)
      setSelectedDate(preloadedDate, self.config.dateFormat);
    self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
    self.currentYear = self._initialDate.getFullYear();
    self.currentMonth = self._initialDate.getMonth();
    if (self.selectedDates.length > 0)
      self.latestSelectedDateObj = self.selectedDates[0];
    if (self.config.minTime !== void 0)
      self.config.minTime = self.parseDate(self.config.minTime, "H:i");
    if (self.config.maxTime !== void 0)
      self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
    self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
    self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
  }
  function setupInputs() {
    self.input = getInputElem();
    if (!self.input) {
      self.config.errorHandler(new Error("Invalid input element specified"));
      return;
    }
    self.input._type = self.input.type;
    self.input.type = "text";
    self.input.classList.add("flatpickr-input");
    self._input = self.input;
    if (self.config.altInput) {
      self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
      self._input = self.altInput;
      self.altInput.placeholder = self.input.placeholder;
      self.altInput.disabled = self.input.disabled;
      self.altInput.required = self.input.required;
      self.altInput.tabIndex = self.input.tabIndex;
      self.altInput.type = "text";
      self.input.setAttribute("type", "hidden");
      if (!self.config.static && self.input.parentNode)
        self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
    }
    if (!self.config.allowInput)
      self._input.setAttribute("readonly", "readonly");
    updatePositionElement();
  }
  function updatePositionElement() {
    self._positionElement = self.config.positionElement || self._input;
  }
  function setupMobile() {
    var inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
    self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
    self.mobileInput.tabIndex = 1;
    self.mobileInput.type = inputType;
    self.mobileInput.disabled = self.input.disabled;
    self.mobileInput.required = self.input.required;
    self.mobileInput.placeholder = self.input.placeholder;
    self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";
    if (self.selectedDates.length > 0) {
      self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
    }
    if (self.config.minDate)
      self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
    if (self.config.maxDate)
      self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
    if (self.input.getAttribute("step"))
      self.mobileInput.step = String(self.input.getAttribute("step"));
    self.input.type = "hidden";
    if (self.altInput !== void 0)
      self.altInput.type = "hidden";
    try {
      if (self.input.parentNode)
        self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
    } catch (_a) {
    }
    bind(self.mobileInput, "change", function(e) {
      self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
      triggerEvent("onChange");
      triggerEvent("onClose");
    });
  }
  function toggle(e) {
    if (self.isOpen === true)
      return self.close();
    self.open(e);
  }
  function triggerEvent(event, data) {
    if (self.config === void 0)
      return;
    var hooks = self.config[event];
    if (hooks !== void 0 && hooks.length > 0) {
      for (var i = 0; hooks[i] && i < hooks.length; i++)
        hooks[i](self.selectedDates, self.input.value, self, data);
    }
    if (event === "onChange") {
      self.input.dispatchEvent(createEvent("change"));
      self.input.dispatchEvent(createEvent("input"));
    }
  }
  function createEvent(name) {
    var e = document.createEvent("Event");
    e.initEvent(name, true, true);
    return e;
  }
  function isDateSelected(date) {
    for (var i = 0; i < self.selectedDates.length; i++) {
      var selectedDate = self.selectedDates[i];
      if (selectedDate instanceof Date && compareDates(selectedDate, date) === 0)
        return "" + i;
    }
    return false;
  }
  function isDateInRange(date) {
    if (self.config.mode !== "range" || self.selectedDates.length < 2)
      return false;
    return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;
  }
  function updateNavigationCurrentMonth() {
    if (self.config.noCalendar || self.isMobile || !self.monthNav)
      return;
    self.yearElements.forEach(function(yearElement, i) {
      var d = new Date(self.currentYear, self.currentMonth, 1);
      d.setMonth(self.currentMonth + i);
      if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
        self.monthElements[i].textContent = monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
      } else {
        self.monthsDropdownContainer.value = d.getMonth().toString();
      }
      yearElement.value = d.getFullYear().toString();
    });
    self._hidePrevMonthArrow = self.config.minDate !== void 0 && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
    self._hideNextMonthArrow = self.config.maxDate !== void 0 && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
  }
  function getDateStr(specificFormat) {
    var format2 = specificFormat || (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
    return self.selectedDates.map(function(dObj) {
      return self.formatDate(dObj, format2);
    }).filter(function(d, i, arr) {
      return self.config.mode !== "range" || self.config.enableTime || arr.indexOf(d) === i;
    }).join(self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator);
  }
  function updateValue(triggerChange2) {
    if (triggerChange2 === void 0) {
      triggerChange2 = true;
    }
    if (self.mobileInput !== void 0 && self.mobileFormatStr) {
      self.mobileInput.value = self.latestSelectedDateObj !== void 0 ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
    }
    self.input.value = getDateStr(self.config.dateFormat);
    if (self.altInput !== void 0) {
      self.altInput.value = getDateStr(self.config.altFormat);
    }
    if (triggerChange2 !== false)
      triggerEvent("onValueUpdate");
  }
  function onMonthNavClick(e) {
    var eventTarget = getEventTarget(e);
    var isPrevMonth = self.prevMonthNav.contains(eventTarget);
    var isNextMonth = self.nextMonthNav.contains(eventTarget);
    if (isPrevMonth || isNextMonth) {
      changeMonth(isPrevMonth ? -1 : 1);
    } else if (self.yearElements.indexOf(eventTarget) >= 0) {
      eventTarget.select();
    } else if (eventTarget.classList.contains("arrowUp")) {
      self.changeYear(self.currentYear + 1);
    } else if (eventTarget.classList.contains("arrowDown")) {
      self.changeYear(self.currentYear - 1);
    }
  }
  function timeWrapper(e) {
    e.preventDefault();
    var isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
    if (self.amPM !== void 0 && eventTarget === self.amPM) {
      self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
    }
    var min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);
    var newValue = curValue + step * delta;
    if (typeof input.value !== "undefined" && input.value.length === 2) {
      var isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
      if (newValue < min) {
        newValue = max + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));
        if (isMinuteElem)
          incrementNumInput(void 0, -1, self.hourElement);
      } else if (newValue > max) {
        newValue = input === self.hourElement ? newValue - max - int(!self.amPM) : min;
        if (isMinuteElem)
          incrementNumInput(void 0, 1, self.hourElement);
      }
      if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {
        self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
      }
      input.value = pad(newValue);
    }
  }
  init();
  return self;
}
function _flatpickr(nodeList, config) {
  var nodes = Array.prototype.slice.call(nodeList).filter(function(x) {
    return x instanceof HTMLElement;
  });
  var instances = [];
  for (var i = 0; i < nodes.length; i++) {
    var node = nodes[i];
    try {
      if (node.getAttribute("data-fp-omit") !== null)
        continue;
      if (node._flatpickr !== void 0) {
        node._flatpickr.destroy();
        node._flatpickr = void 0;
      }
      node._flatpickr = FlatpickrInstance(node, config || {});
      instances.push(node._flatpickr);
    } catch (e) {
      console.error(e);
    }
  }
  return instances.length === 1 ? instances[0] : instances;
}
if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
  HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function(config) {
    return _flatpickr(this, config);
  };
  HTMLElement.prototype.flatpickr = function(config) {
    return _flatpickr([this], config);
  };
}
var flatpickr = function(selector, config) {
  if (typeof selector === "string") {
    return _flatpickr(window.document.querySelectorAll(selector), config);
  } else if (selector instanceof Node) {
    return _flatpickr([selector], config);
  } else {
    return _flatpickr(selector, config);
  }
};
flatpickr.defaultConfig = {};
flatpickr.l10ns = {
  en: __assign({}, default_default),
  default: __assign({}, default_default)
};
flatpickr.localize = function(l10n) {
  flatpickr.l10ns.default = __assign(__assign({}, flatpickr.l10ns.default), l10n);
};
flatpickr.setDefaults = function(config) {
  flatpickr.defaultConfig = __assign(__assign({}, flatpickr.defaultConfig), config);
};
flatpickr.parseDate = createDateParser({});
flatpickr.formatDate = createDateFormatter({});
flatpickr.compareDates = compareDates;
if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
  jQuery.fn.flatpickr = function(config) {
    return _flatpickr(this, config);
  };
}
Date.prototype.fp_incr = function(days) {
  return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
};
if (typeof window !== "undefined") {
  window.flatpickr = flatpickr;
}
var esm_default = flatpickr;

// node_modules/date-fns/constants.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var minTime = -maxTime;
var millisecondsInWeek = 6048e5;
var millisecondsInDay = 864e5;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;
var constructFromSymbol = Symbol.for("constructDateFrom");

// node_modules/date-fns/constructFrom.js
function constructFrom(date, value) {
  if (typeof date === "function") return date(value);
  if (date && typeof date === "object" && constructFromSymbol in date)
    return date[constructFromSymbol](value);
  if (date instanceof Date) return new date.constructor(value);
  return new Date(value);
}

// node_modules/date-fns/toDate.js
function toDate(argument, context) {
  return constructFrom(context || argument, argument);
}

// node_modules/date-fns/_lib/defaultOptions.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/startOfWeek.js
function startOfWeek(date, options) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const defaultOptions2 = getDefaultOptions();
  const weekStartsOn = (_h = (_g = (_d = (_c = options == null ? void 0 : options.weekStartsOn) != null ? _c : (_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.weekStartsOn) != null ? _d : defaultOptions2.weekStartsOn) != null ? _g : (_f = (_e = defaultOptions2.locale) == null ? void 0 : _e.options) == null ? void 0 : _f.weekStartsOn) != null ? _h : 0;
  const _date = toDate(date, options == null ? void 0 : options.in);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  _date.setDate(_date.getDate() - diff);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// node_modules/date-fns/startOfISOWeek.js
function startOfISOWeek(date, options) {
  return startOfWeek(date, { ...options, weekStartsOn: 1 });
}

// node_modules/date-fns/getISOWeekYear.js
function getISOWeekYear(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const year = _date.getFullYear();
  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js
function getTimezoneOffsetInMilliseconds(date) {
  const _date = toDate(date);
  const utcDate = new Date(
    Date.UTC(
      _date.getFullYear(),
      _date.getMonth(),
      _date.getDate(),
      _date.getHours(),
      _date.getMinutes(),
      _date.getSeconds(),
      _date.getMilliseconds()
    )
  );
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}

// node_modules/date-fns/_lib/normalizeDates.js
function normalizeDates(context, ...dates) {
  const normalize = constructFrom.bind(
    null,
    context || dates.find((date) => typeof date === "object")
  );
  return dates.map(normalize);
}

// node_modules/date-fns/startOfDay.js
function startOfDay(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// node_modules/date-fns/differenceInCalendarDays.js
function differenceInCalendarDays(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = normalizeDates(
    options == null ? void 0 : options.in,
    laterDate,
    earlierDate
  );
  const laterStartOfDay = startOfDay(laterDate_);
  const earlierStartOfDay = startOfDay(earlierDate_);
  const laterTimestamp = +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);
  const earlierTimestamp = +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);
  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);
}

// node_modules/date-fns/startOfISOWeekYear.js
function startOfISOWeekYear(date, options) {
  const year = getISOWeekYear(date, options);
  const fourthOfJanuary = constructFrom((options == null ? void 0 : options.in) || date, 0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  return startOfISOWeek(fourthOfJanuary);
}

// node_modules/date-fns/isDate.js
function isDate(value) {
  return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/isValid.js
function isValid(date) {
  return !(!isDate(date) && typeof date !== "number" || isNaN(+toDate(date)));
}

// node_modules/date-fns/startOfYear.js
function startOfYear(date, options) {
  const date_ = toDate(date, options == null ? void 0 : options.in);
  date_.setFullYear(date_.getFullYear(), 0, 1);
  date_.setHours(0, 0, 0, 0);
  return date_;
}

// node_modules/date-fns/locale/en-US/_lib/formatDistance.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = (token, count, options) => {
  let result;
  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options == null ? void 0 : options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};

// node_modules/date-fns/locale/_lib/buildFormatLongFn.js
function buildFormatLongFn(args) {
  return (options = {}) => {
    const width = options.width ? String(options.width) : args.defaultWidth;
    const format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/locale/en-US/_lib/formatLong.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};

// node_modules/date-fns/locale/en-US/_lib/formatRelative.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];

// node_modules/date-fns/locale/_lib/buildLocalizeFn.js
function buildLocalizeFn(args) {
  return (value, options) => {
    const context = (options == null ? void 0 : options.context) ? String(options.context) : "standalone";
    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width = (options == null ? void 0 : options.width) ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width = (options == null ? void 0 : options.width) ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[width] || args.values[defaultWidth];
    }
    const index = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index];
  };
}

// node_modules/date-fns/locale/en-US/_lib/localize.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};

// node_modules/date-fns/locale/_lib/buildMatchFn.js
function buildMatchFn(args) {
  return (string, options = {}) => {
    const width = options.width;
    const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];
    const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString)) : (
      // [TODO] -- I challenge you to fix the type
      findKey(parsePatterns, (pattern) => pattern.test(matchedString))
    );
    let value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? (
      // [TODO] -- I challenge you to fix the type
      options.valueCallback(value)
    ) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}
function findKey(object, predicate) {
  for (const key in object) {
    if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (let key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/locale/_lib/buildMatchPatternFn.js
function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    const matchedString = matchResult[0];
    const parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}

// node_modules/date-fns/locale/en-US/_lib/match.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10)
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// node_modules/date-fns/locale/en-US.js
var enUS = {
  code: "en-US",
  formatDistance,
  formatLong,
  formatRelative,
  localize,
  match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};

// node_modules/date-fns/getDayOfYear.js
function getDayOfYear(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const diff = differenceInCalendarDays(_date, startOfYear(_date));
  const dayOfYear = diff + 1;
  return dayOfYear;
}

// node_modules/date-fns/getISOWeek.js
function getISOWeek(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);
  return Math.round(diff / millisecondsInWeek) + 1;
}

// node_modules/date-fns/getWeekYear.js
function getWeekYear(date, options) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const _date = toDate(date, options == null ? void 0 : options.in);
  const year = _date.getFullYear();
  const defaultOptions2 = getDefaultOptions();
  const firstWeekContainsDate = (_h = (_g = (_d = (_c = options == null ? void 0 : options.firstWeekContainsDate) != null ? _c : (_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) != null ? _d : defaultOptions2.firstWeekContainsDate) != null ? _g : (_f = (_e = defaultOptions2.locale) == null ? void 0 : _e.options) == null ? void 0 : _f.firstWeekContainsDate) != null ? _h : 1;
  const firstWeekOfNextYear = constructFrom((options == null ? void 0 : options.in) || date, 0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
  const firstWeekOfThisYear = constructFrom((options == null ? void 0 : options.in) || date, 0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
  if (+_date >= +startOfNextYear) {
    return year + 1;
  } else if (+_date >= +startOfThisYear) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/startOfWeekYear.js
function startOfWeekYear(date, options) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const defaultOptions2 = getDefaultOptions();
  const firstWeekContainsDate = (_h = (_g = (_d = (_c = options == null ? void 0 : options.firstWeekContainsDate) != null ? _c : (_b = (_a = options == null ? void 0 : options.locale) == null ? void 0 : _a.options) == null ? void 0 : _b.firstWeekContainsDate) != null ? _d : defaultOptions2.firstWeekContainsDate) != null ? _g : (_f = (_e = defaultOptions2.locale) == null ? void 0 : _e.options) == null ? void 0 : _f.firstWeekContainsDate) != null ? _h : 1;
  const year = getWeekYear(date, options);
  const firstWeek = constructFrom((options == null ? void 0 : options.in) || date, 0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  const _date = startOfWeek(firstWeek, options);
  return _date;
}

// node_modules/date-fns/getWeek.js
function getWeek(date, options) {
  const _date = toDate(date, options == null ? void 0 : options.in);
  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);
  return Math.round(diff / millisecondsInWeek) + 1;
}

// node_modules/date-fns/_lib/addLeadingZeros.js
function addLeadingZeros(number, targetLength) {
  const sign = number < 0 ? "-" : "";
  const output = Math.abs(number).toString().padStart(targetLength, "0");
  return sign + output;
}

// node_modules/date-fns/_lib/format/lightFormatters.js
var lightFormatters = {
  // Year
  y(date, token) {
    const signedYear = date.getFullYear();
    const year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M(date, token) {
    const month = date.getMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d(date, token) {
    return addLeadingZeros(date.getDate(), token.length);
  },
  // AM or PM
  a(date, token) {
    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h(date, token) {
    return addLeadingZeros(date.getHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H(date, token) {
    return addLeadingZeros(date.getHours(), token.length);
  },
  // Minute
  m(date, token) {
    return addLeadingZeros(date.getMinutes(), token.length);
  },
  // Second
  s(date, token) {
    return addLeadingZeros(date.getSeconds(), token.length);
  },
  // Fraction of second
  S(date, token) {
    const numberOfDigits = token.length;
    const milliseconds = date.getMilliseconds();
    const fractionalSeconds = Math.trunc(
      milliseconds * Math.pow(10, numberOfDigits - 3)
    );
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};

// node_modules/date-fns/_lib/format/formatters.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  // Era
  G: function(date, token, localize2) {
    const era = date.getFullYear() > 0 ? 1 : 0;
    switch (token) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, { width: "abbreviated" });
      // A, B
      case "GGGGG":
        return localize2.era(era, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return localize2.era(era, { width: "wide" });
    }
  },
  // Year
  y: function(date, token, localize2) {
    if (token === "yo") {
      const signedYear = date.getFullYear();
      const year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, { unit: "year" });
    }
    return lightFormatters.y(date, token);
  },
  // Local week-numbering year
  Y: function(date, token, localize2, options) {
    const signedWeekYear = getWeekYear(date, options);
    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      const twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, { unit: "year" });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function(date, token) {
    const isoWeekYear = getISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function(date, token) {
    const year = date.getFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function(date, token, localize2) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "Q":
        return String(quarter);
      // 01, 02, 03, 04
      case "QQ":
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return localize2.ordinalNumber(quarter, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function(date, token, localize2) {
    const quarter = Math.ceil((date.getMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case "q":
        return String(quarter);
      // 01, 02, 03, 04
      case "qq":
        return addLeadingZeros(quarter, 2);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return localize2.ordinalNumber(quarter, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function(date, token, localize2) {
    const month = date.getMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters.M(date, token);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return localize2.ordinalNumber(month + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      // J, F, ..., D
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return localize2.month(month, { width: "wide", context: "formatting" });
    }
  },
  // Stand-alone month
  L: function(date, token, localize2) {
    const month = date.getMonth();
    switch (token) {
      // 1, 2, ..., 12
      case "L":
        return String(month + 1);
      // 01, 02, ..., 12
      case "LL":
        return addLeadingZeros(month + 1, 2);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return localize2.ordinalNumber(month + 1, { unit: "month" });
      // Jan, Feb, ..., Dec
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      // J, F, ..., D
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return localize2.month(month, { width: "wide", context: "standalone" });
    }
  },
  // Local week of year
  w: function(date, token, localize2, options) {
    const week = getWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, { unit: "week" });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function(date, token, localize2) {
    const isoWeek = getISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, { unit: "week" });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getDate(), { unit: "date" });
    }
    return lightFormatters.d(date, token);
  },
  // Day of year
  D: function(date, token, localize2) {
    const dayOfYear = getDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, { unit: "dayOfYear" });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function(date, token, localize2) {
    const dayOfWeek = date.getDay();
    switch (token) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function(date, token, localize2, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case "e":
        return String(localDayOfWeek);
      // Padded numerical value
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function(date, token, localize2, options) {
    const dayOfWeek = date.getDay();
    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      // Numerical value (same as in `e`)
      case "c":
        return String(localDayOfWeek);
      // Padded numerical value
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, { unit: "day" });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      // T
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      // Tu
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      // Tuesday
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function(date, token, localize2) {
    const dayOfWeek = date.getDay();
    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      // 2
      case "i":
        return String(isoDayOfWeek);
      // 02
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      // 2nd
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, { unit: "day" });
      // Tue
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      // T
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      // Tuesday
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function(date, token, localize2) {
    const hours = date.getHours();
    const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function(date, token, localize2) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function(date, token, localize2) {
    const hours = date.getHours();
    let dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function(date, token, localize2) {
    if (token === "ho") {
      let hours = date.getHours() % 12;
      if (hours === 0) hours = 12;
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return lightFormatters.h(date, token);
  },
  // Hour [0-23]
  H: function(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getHours(), { unit: "hour" });
    }
    return lightFormatters.H(date, token);
  },
  // Hour [0-11]
  K: function(date, token, localize2) {
    const hours = date.getHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function(date, token, localize2) {
    let hours = date.getHours();
    if (hours === 0) hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, { unit: "hour" });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getMinutes(), { unit: "minute" });
    }
    return lightFormatters.m(date, token);
  },
  // Second
  s: function(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getSeconds(), { unit: "second" });
    }
    return lightFormatters.s(date, token);
  },
  // Fraction of second
  S: function(date, token) {
    return lightFormatters.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      // Hours and optional minutes
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case "XXXXX":
      case "XXX":
      // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      // Hours and optional minutes
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case "xxxxx":
      case "xxx":
      // Hours and minutes with `:` delimiter
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      // Short
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function(date, token, _localize) {
    const timezoneOffset = date.getTimezoneOffset();
    switch (token) {
      // Short
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      // Long
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function(date, token, _localize) {
    const timestamp = Math.trunc(+date / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function(date, token, _localize) {
    return addLeadingZeros(+date, token.length);
  }
};
function formatTimezoneShort(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = Math.trunc(absOffset / 60);
  const minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, delimiter) {
  if (offset % 60 === 0) {
    const sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, delimiter);
}
function formatTimezone(offset, delimiter = "") {
  const sign = offset > 0 ? "-" : "+";
  const absOffset = Math.abs(offset);
  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);
  const minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

// node_modules/date-fns/_lib/format/longFormatters.js
var dateLongFormatter = (pattern, formatLong2) => {
  switch (pattern) {
    case "P":
      return formatLong2.date({ width: "short" });
    case "PP":
      return formatLong2.date({ width: "medium" });
    case "PPP":
      return formatLong2.date({ width: "long" });
    case "PPPP":
    default:
      return formatLong2.date({ width: "full" });
  }
};
var timeLongFormatter = (pattern, formatLong2) => {
  switch (pattern) {
    case "p":
      return formatLong2.time({ width: "short" });
    case "pp":
      return formatLong2.time({ width: "medium" });
    case "ppp":
      return formatLong2.time({ width: "long" });
    case "pppp":
    default:
      return formatLong2.time({ width: "full" });
  }
};
var dateTimeLongFormatter = (pattern, formatLong2) => {
  const matchResult = pattern.match(/(P+)(p+)?/) || [];
  const datePattern = matchResult[1];
  const timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  let dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({ width: "short" });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({ width: "medium" });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({ width: "long" });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({ width: "full" });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};

// node_modules/date-fns/_lib/protectedTokens.js
var dayOfYearTokenRE = /^D+$/;
var weekYearTokenRE = /^Y+$/;
var throwTokens = ["D", "DD", "YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return dayOfYearTokenRE.test(token);
}
function isProtectedWeekYearToken(token) {
  return weekYearTokenRE.test(token);
}
function warnOrThrowProtectedError(token, format2, input) {
  const _message = message(token, format2, input);
  console.warn(_message);
  if (throwTokens.includes(token)) throw new RangeError(_message);
}
function message(token, format2, input) {
  const subject = token[0] === "Y" ? "years" : "days of the month";
  return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format2}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}

// node_modules/date-fns/format.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(date, formatStr, options) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r;
  const defaultOptions2 = getDefaultOptions();
  const locale = (_b = (_a = options == null ? void 0 : options.locale) != null ? _a : defaultOptions2.locale) != null ? _b : enUS;
  const firstWeekContainsDate = (_j = (_i = (_f = (_e = options == null ? void 0 : options.firstWeekContainsDate) != null ? _e : (_d = (_c = options == null ? void 0 : options.locale) == null ? void 0 : _c.options) == null ? void 0 : _d.firstWeekContainsDate) != null ? _f : defaultOptions2.firstWeekContainsDate) != null ? _i : (_h = (_g = defaultOptions2.locale) == null ? void 0 : _g.options) == null ? void 0 : _h.firstWeekContainsDate) != null ? _j : 1;
  const weekStartsOn = (_r = (_q = (_n = (_m = options == null ? void 0 : options.weekStartsOn) != null ? _m : (_l = (_k = options == null ? void 0 : options.locale) == null ? void 0 : _k.options) == null ? void 0 : _l.weekStartsOn) != null ? _n : defaultOptions2.weekStartsOn) != null ? _q : (_p = (_o = defaultOptions2.locale) == null ? void 0 : _o.options) == null ? void 0 : _p.weekStartsOn) != null ? _r : 0;
  const originalDate = toDate(date, options == null ? void 0 : options.in);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  let parts = formatStr.match(longFormattingTokensRegExp).map((substring) => {
    const firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      const longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map((substring) => {
    if (substring === "''") {
      return { isToken: false, value: "'" };
    }
    const firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return { isToken: false, value: cleanEscapedString(substring) };
    }
    if (formatters[firstCharacter]) {
      return { isToken: true, value: substring };
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError(
        "Format string contains an unescaped latin alphabet character `" + firstCharacter + "`"
      );
    }
    return { isToken: false, value: substring };
  });
  if (locale.localize.preprocessor) {
    parts = locale.localize.preprocessor(originalDate, parts);
  }
  const formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale
  };
  return parts.map((part) => {
    if (!part.isToken) return part.value;
    const token = part.value;
    if (!(options == null ? void 0 : options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token) || !(options == null ? void 0 : options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
      warnOrThrowProtectedError(token, formatStr, String(date));
    }
    const formatter = formatters[token[0]];
    return formatter(originalDate, token, locale.localize, formatterOptions);
  }).join("");
}
function cleanEscapedString(input) {
  const matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// src/renderers/DateRenderer.ts
var flatpickrInstances = /* @__PURE__ */ new WeakMap();
var DateRenderer = class {
  constructor() {
    // Map format names to date-fns format strings
    this.formatMap = {
      "MMMM D, YYYY": "MMMM d, yyyy",
      "MMM D": "MMM d",
      "DD/MM/YYYY": "dd/MM/yyyy",
      "MM/DD/YYYY": "MM/dd/yyyy",
      "YYYY/MM/DD": "yyyy/MM/dd"
    };
  }
  render(app, container, value, column, onChange) {
    container.empty();
    container.addClass("json-table-date-cell");
    const oldInstance = flatpickrInstances.get(container);
    if (oldInstance) {
      oldInstance.destroy();
      flatpickrInstances.delete(container);
    }
    const typeOpts = column.typeOptions;
    const currentFormat = (typeOpts == null ? void 0 : typeOpts.dateFormat) || "YYYY/MM/DD";
    const formatString = this.formatMap[currentFormat];
    const timestamp = parseInt(value, 10);
    let displayDate = "";
    let currentDate = null;
    if (!isNaN(timestamp)) {
      currentDate = new Date(timestamp);
      try {
        displayDate = format(currentDate, formatString);
      } catch (e) {
        console.error("Error formatting date:", e);
        displayDate = "Invalid Date";
        currentDate = null;
      }
    }
    const dateWrapper = container.createEl("div", { cls: "json-table-date-wrapper" });
    const dateSpan = dateWrapper.createSpan({
      text: displayDate,
      cls: "json-table-date-display"
    });
    try {
      const fpInstance = esm_default(dateWrapper, {
        clickOpens: true,
        allowInput: false,
        dateFormat: "U",
        // Internal format is Unix timestamp (seconds)
        defaultDate: currentDate || void 0,
        // Use parsed date or undefined
        appendTo: document.body,
        onChange: (selectedDates) => {
          var _a;
          if (selectedDates.length > 0) {
            const selectedDate = selectedDates[0];
            const newTimestampMs = selectedDate.getTime();
            const updatedFormatString = this.formatMap[((_a = column.typeOptions) == null ? void 0 : _a.dateFormat) || "YYYY/MM/DD"];
            dateSpan.setText(format(selectedDate, updatedFormatString));
            onChange(newTimestampMs.toString());
          } else {
            dateSpan.setText("");
            onChange("");
          }
        }
      });
      flatpickrInstances.set(container, fpInstance);
    } catch (err) {
      console.error("Failed to initialize flatpickr:", err);
      container.setText("Error initializing date picker");
      return;
    }
  }
  // End render method
};

// src/editors/TextColumnEditor.ts
var TextColumnEditor = class {
  render(container, column, data, view) {
  }
};

// src/editors/DropdownColumnEditor.ts
var import_obsidian2 = require("obsidian");
var DropdownColumnEditor = class {
  render(container, column, data, view) {
    container.createEl("label", {
      text: "Options",
      cls: "json-table-popup-label"
    });
    column.typeOptions = column.typeOptions || {};
    const typeOpts = column.typeOptions;
    typeOpts.options = typeOpts.options || [];
    const optionsListContainer = container.createEl("div", { cls: "json-table-edit-options-list" });
    const renderOptionsList = () => {
      optionsListContainer.empty();
      typeOpts.options.forEach((option, index) => {
        const optionRow = optionsListContainer.createEl("div", { cls: "json-table-edit-option" });
        const tag = optionRow.createEl("span", {
          text: option.value,
          cls: "json-table-dropdown-tag"
        });
        if (option.style) {
          tag.addClass(`dropdown-tag--${option.style}`);
        }
        const deleteOptBtn = optionRow.createEl("button", {
          text: "\xD7",
          cls: "json-table-edit-option-delete",
          attr: { "title": "Delete option" }
        });
        deleteOptBtn.addEventListener("mousedown", (e) => e.preventDefault());
        deleteOptBtn.addEventListener("click", async () => {
          typeOpts.options.splice(index, 1);
          await view.saveTableData(data);
          const currentPath = view.getFilePath();
          if (currentPath) {
            const file = view.app.vault.getAbstractFileByPath(currentPath);
            if (file instanceof import_obsidian2.TFile) {
              await view.renderContent(file);
            } else {
              console.error("Cannot re-render, file not found at path:", currentPath);
            }
          } else {
            console.error("Cannot re-render, view has no file path set.");
          }
          renderOptionsList();
        });
      });
    };
    renderOptionsList();
    const addContainer = container.createEl("div", { cls: "json-table-edit-option-add" });
    const newOptionInput = addContainer.createEl("input", {
      type: "text",
      placeholder: "Add new option",
      cls: "json-table-edit-input"
    });
    const addOptionBtn = addContainer.createEl("button", {
      text: "Add",
      cls: "json-table-add-row"
    });
    const addOptionAction = async () => {
      const value = newOptionInput.value.trim();
      if (!value) return;
      if (typeOpts.options.find((o) => o.value === value)) return;
      typeOpts.options.push({ value, style: "default" });
      newOptionInput.value = "";
      await view.saveTableData(data);
      renderOptionsList();
    };
    addOptionBtn.addEventListener("mousedown", (e) => e.preventDefault());
    addOptionBtn.addEventListener("click", addOptionAction);
    newOptionInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        addOptionAction();
      }
    });
  }
};

// src/editors/NoteLinkColumnEditor.ts
var NoteLinkColumnEditor = class {
  render(container, column, data, view) {
    container.createEl("label", {
      cls: "json-table-popup-label",
      text: "Suggest Options:"
    });
    const settingDiv = container.createDiv({ cls: "json-table-editor-setting" });
    const checkboxId = `suggest-all-${column.id}`;
    const checkbox = settingDiv.createEl("input", {
      type: "checkbox",
      attr: { id: checkboxId }
    });
    const currentTypeOpts = column.typeOptions;
    checkbox.checked = !!(currentTypeOpts == null ? void 0 : currentTypeOpts.suggestAllFiles);
    settingDiv.createEl("label", {
      text: "Suggest all file types (not just notes)",
      attr: { for: checkboxId }
    });
    checkbox.addEventListener("change", async () => {
      column.typeOptions = column.typeOptions || {};
      const newTypeOpts = column.typeOptions;
      newTypeOpts.suggestAllFiles = checkbox.checked;
      await view.saveTableData(data);
    });
  }
};

// src/editors/DateColumnEditor.ts
var import_obsidian3 = require("obsidian");
var DateColumnEditor = class {
  constructor() {
    // Define the available formats with user-facing labels
    this.availableFormats = [
      { label: "Full Date", format: "MMMM D, YYYY" },
      { label: "Short Date", format: "MMM D" },
      { label: "Day/Month/Year", format: "DD/MM/YYYY" },
      { label: "Month/Day/Year", format: "MM/DD/YYYY" },
      { label: "Year/Month/Day", format: "YYYY/MM/DD" }
    ];
    // Define a default format to use if none is set
    this.defaultFormat = "YYYY/MM/DD";
  }
  render(container, column, data, view) {
    container.createEl("label", {
      cls: "json-table-popup-label",
      text: "Date Format:"
    });
    const select = container.createEl("select", { cls: "json-table-popup-select" });
    const currentTypeOpts = column.typeOptions;
    const currentFormat = (currentTypeOpts == null ? void 0 : currentTypeOpts.dateFormat) || this.defaultFormat;
    this.availableFormats.forEach((formatInfo) => {
      const option = select.createEl("option", {
        text: formatInfo.label,
        // Display label
        value: formatInfo.format
        // Store format string
      });
      if (currentFormat === formatInfo.format) {
        option.selected = true;
      }
    });
    select.addEventListener("change", async () => {
      const newFormat = select.value;
      column.typeOptions = column.typeOptions || {};
      const newTypeOpts = column.typeOptions;
      if (newTypeOpts.dateFormat !== newFormat) {
        newTypeOpts.dateFormat = newFormat;
        await view.saveTableData(data);
        const currentPath = view.getFilePath();
        if (currentPath) {
          const file = view.app.vault.getAbstractFileByPath(currentPath);
          if (file instanceof import_obsidian3.TFile) {
            await view.renderContent(file);
          } else {
            console.error("Cannot re-render, file not found at path:", currentPath);
          }
        } else {
          console.error("Cannot re-render, view has no file path set.");
        }
      }
    });
  }
};

// src/SortHandler.ts
var SortHandler = class {
  constructor(data, triggerRender, view) {
    this.data = data;
    this.triggerRender = triggerRender;
    this.view = view;
    if (!this.data.views || !Array.isArray(this.data.views) || this.data.views.length === 0) {
      console.warn("No views array found in data, creating default view.");
      this.data.views = [{ id: "default_" + Date.now(), name: "Default", sort: [], filter: [] }];
    }
    if (!this.data.views[0].sort) this.data.views[0].sort = [];
    if (!this.data.views[0].filter) this.data.views[0].filter = [];
  }
  // --- Helper Methods for Sort State ---
  getCurrentSortRules() {
    var _a, _b;
    return ((_b = (_a = this.data.views) == null ? void 0 : _a[0]) == null ? void 0 : _b.sort) || [];
  }
  setCurrentSortRules(rules) {
    if (this.data.views && this.data.views[0]) {
      this.data.views[0].sort = rules;
    } else {
      console.error("Cannot set sort rules: No view definition found in data.");
    }
  }
  // --- UI Method ---
  /** Displays the popup UI for selecting sort options */
  showSortPopup(button) {
    const existingPopup = document.querySelector(".json-table-sort-popup");
    if (existingPopup) existingPopup.remove();
    const popup = document.body.createEl("div", { cls: "json-table-popup json-table-sort-popup" });
    const rect = button.getBoundingClientRect();
    popup.style.top = `${rect.bottom + 5}px`;
    popup.style.left = `${rect.left}px`;
    const currentRules = this.getCurrentSortRules();
    const currentSort = currentRules.length > 0 ? currentRules[0] : { columnId: null, direction: "asc" };
    const header = popup.createEl("div", { cls: "json-table-popup-header" });
    header.createEl("h3", { text: "Sort", cls: "json-table-popup-title" });
    const content = popup.createEl("div", { cls: "json-table-popup-content" });
    const columnSelect = content.createEl("select", { cls: "json-table-popup-select" });
    const noneOption = columnSelect.createEl("option", { text: "-- None --", value: "" });
    if (currentSort.columnId === null) noneOption.selected = true;
    this.data.columns.forEach((col) => {
      const option = columnSelect.createEl("option", { text: col.name, value: col.id });
      if (col.id === currentSort.columnId) option.selected = true;
    });
    const directionSelect = content.createEl("select", { cls: "json-table-popup-select" });
    const ascOption = directionSelect.createEl("option", { text: "Ascending", value: "asc" });
    const descOption = directionSelect.createEl("option", { text: "Descending", value: "desc" });
    if (currentSort.direction === "asc") ascOption.selected = true;
    else descOption.selected = true;
    directionSelect.disabled = currentSort.columnId === null;
    columnSelect.addEventListener("change", () => {
      directionSelect.disabled = columnSelect.value === "";
    });
    const footer = popup.createEl("div", { cls: "json-table-popup-footer" });
    const applyButton = footer.createEl("button", {
      text: "Apply",
      cls: "json-table-btn json-table-btn--standard"
    });
    const handleApplyClick = async () => {
      const selectedColumnId = columnSelect.value || null;
      const selectedDirection = directionSelect.value;
      const newRules = selectedColumnId ? [{ columnId: selectedColumnId, direction: selectedDirection }] : [];
      try {
        this.setCurrentSortRules(newRules);
        if (this.view && typeof this.view.saveTableData === "function") {
          await this.view.saveTableData(this.data);
        } else {
          console.error("Error: View instance or saveTableData method is not available!");
          closePopup();
          return;
        }
        this.triggerRender();
        closePopup();
      } catch (error) {
        console.error("Error applying sort or saving:", error);
        closePopup();
      }
    };
    applyButton.addEventListener("click", handleApplyClick);
    const closePopup = () => {
      popup.remove();
      document.removeEventListener("click", clickOutside, true);
    };
    const clickOutside = (e) => {
      if (!popup.contains(e.target) && !button.contains(e.target)) {
        closePopup();
      }
    };
    setTimeout(() => {
      document.addEventListener("click", clickOutside, true);
    }, 0);
  }
  // End showSortPopup
  // --- Sorting Logic ---
  /** Sorts the this.data.rows array in place based on the rules in the current view */
  // public sortDataInMemory(): void {
  //   const rules = this.getCurrentSortRules();
  //   if (rules.length === 0) {
  //     // TODO: Restore original order if needed
  //     return;
  //   }
  //   const { columnId, direction } = rules[0];
  //   const sortColumn = this.data.columns.find(c => c.id === columnId);
  //   if (!sortColumn) {
  //       console.warn(`Sort column with ID "${columnId}" not found. Skipping sort.`);
  //       return;
  //   }
  //   const stripEmojis = (str: string): string => { /* ... emoji stripping regex ... */
  //       return str.replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F1E0}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{FE0F}\u{1F900}-\u{1F9FF}\u{1FA70}-\u{1FAFF}]/gu, '').trim();
  //   };
  //   this.data.rows.sort((rowA, rowB) => {
  //       const cellA = rowA.find(cell => cell.column === columnId);
  //       const cellB = rowB.find(cell => cell.column === columnId);
  //       const valueA_str = cellA?.value || '';
  //       const valueB_str = cellB?.value || '';
  //       let comparison = 0;
  //       // Type-Specific Sorting
  //       switch (sortColumn.type) {
  //           case 'date':
  //               const timestampA = parseInt(valueA_str, 10) || 0;
  //               const timestampB = parseInt(valueB_str, 10) || 0;
  //               comparison = timestampA - timestampB;
  //               break;
  //           case 'checkbox':
  //               const boolA = valueA_str === 'true';
  //               const boolB = valueB_str === 'true';
  //               comparison = (boolA === boolB) ? 0 : (boolA ? 1 : -1);
  //               break;
  //           // Add number case here if implemented
  //           default: // text, dropdown, multiselect, notelink
  //               const valueA = stripEmojis(valueA_str);
  //               const valueB = stripEmojis(valueB_str);
  //               comparison = valueA.toLowerCase().localeCompare(valueB.toLowerCase());
  //               break;
  //       }
  //       return direction === 'asc' ? comparison : comparison * -1;
  //   });
  // } // End sortDataInMemory
  sortDataInMemory() {
    const rules = this.getCurrentSortRules();
    if (rules.length === 0) {
      return;
    }
    const { columnId, direction } = rules[0];
    const sortColumn = this.data.columns.find((c) => c.id === columnId);
    if (!sortColumn) {
      console.warn(`Sort column with ID "${columnId}" not found. Skipping sort.`);
      return;
    }
    const stripEmojis = (str) => {
      return str.replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F1E0}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{FE0F}\u{1F900}-\u{1F9FF}\u{1FA70}-\u{1FAFF}]/gu, "").trim();
    };
    this.data.rows.sort((rowA, rowB) => {
      const cellA = rowA.find((cell) => cell.column === columnId);
      const cellB = rowB.find((cell) => cell.column === columnId);
      const valueA_str = (cellA == null ? void 0 : cellA.value) || "";
      const valueB_str = (cellB == null ? void 0 : cellB.value) || "";
      const isEmptyA = !valueA_str;
      const isEmptyB = !valueB_str;
      if (isEmptyA && isEmptyB) {
        return 0;
      }
      if (isEmptyA) {
        return 1;
      }
      if (isEmptyB) {
        return -1;
      }
      let comparison = 0;
      switch (sortColumn.type) {
        case "date":
          const timestampA = parseInt(valueA_str, 10);
          const timestampB = parseInt(valueB_str, 10);
          comparison = (isNaN(timestampA) ? 0 : timestampA) - (isNaN(timestampB) ? 0 : timestampB);
          break;
        case "checkbox":
          const boolA = valueA_str === "true";
          const boolB = valueB_str === "true";
          comparison = boolA === boolB ? 0 : boolA ? 1 : -1;
          break;
        // Add number case here if implemented
        default:
          const valueA = stripEmojis(valueA_str);
          const valueB = stripEmojis(valueB_str);
          comparison = valueA.toLowerCase().localeCompare(valueB.toLowerCase());
          break;
      }
      return direction === "asc" ? comparison : comparison * -1;
    });
  }
  // End sortDataInMemory
};

// src/icons.ts
var import_obsidian4 = require("obsidian");
var ICON_NAMES = {
  sort: "arrow-up-down",
  filter: "filter",
  text: "case-sensitive",
  dropdown: "circle-chevron-down",
  multiselect: "list",
  checkbox: "check-square",
  date: "calendar",
  link: "link",
  plus: "plus",
  moreVertical: "more-vertical",
  trash: "trash-2",
  gripVertical: "grip-vertical",
  table: "table"
};
function createIconElement(iconName, size = 16, className) {
  const iconContainer = document.createElement("span");
  iconContainer.classList.add("json-table-icon");
  if (className) {
    iconContainer.classList.add(className);
  }
  (0, import_obsidian4.setIcon)(iconContainer, iconName);
  const svg = iconContainer.querySelector("svg");
  if (svg) {
    svg.setAttribute("width", size.toString());
    svg.setAttribute("height", size.toString());
    svg.setAttribute("stroke-width", "2");
  }
  return iconContainer;
}

// src/FilterHandler.ts
var FilterHandler = class {
  constructor(data, triggerRender, view) {
    this.data = data;
    this.triggerRender = triggerRender;
    this.view = view;
    var _a, _b, _c;
    if (!((_b = (_a = this.data.views) == null ? void 0 : _a[0]) == null ? void 0 : _b.filter)) {
      if (!((_c = this.data.views) == null ? void 0 : _c[0])) {
        this.data.views = [{ id: "default_" + Date.now(), name: "Default", sort: [], filter: [] }];
      } else {
        this.data.views[0].filter = [];
      }
    }
  }
  // --- Helper Methods for Filter State ---
  /** Gets the current filter rules from the first view definition */
  getCurrentFilterRules() {
    var _a, _b;
    return ((_b = (_a = this.data.views) == null ? void 0 : _a[0]) == null ? void 0 : _b.filter) || [];
  }
  /** Updates the filter rules in the first view definition */
  setCurrentFilterRules(rules) {
    var _a;
    if ((_a = this.data.views) == null ? void 0 : _a[0]) {
      this.data.views[0].filter = rules;
    } else {
      console.error("Cannot set filter rules: No view definition found.");
    }
  }
  // --- UI Methods ---
  /** Displays the popup UI for managing filters */
  showFilterPopup(button) {
    const existingPopup = document.querySelector(".json-table-filter-popup");
    if (existingPopup) existingPopup.remove();
    const popup = document.body.createEl("div", { cls: "json-table-popup json-table-filter-popup" });
    const rect = button.getBoundingClientRect();
    popup.style.top = `${rect.bottom + 5}px`;
    popup.style.left = `${rect.left}px`;
    const header = popup.createEl("div", { cls: "json-table-popup-header" });
    header.createEl("h3", { text: "Filters", cls: "json-table-popup-title" });
    const content = popup.createEl("div", { cls: "json-table-popup-content" });
    const filtersContainer = content.createDiv({ cls: "json-table-filters-list" });
    this.rebuildFilterListUI(filtersContainer, popup);
    const footer = popup.createEl("div", { cls: "json-table-popup-footer" });
    const addFilterButton = footer.createEl("button", {
      text: "+ Add Filter",
      cls: "json-table-btn json-table-btn--standard"
    });
    addFilterButton.addEventListener("click", () => {
      var _a;
      const defaultColumnId = (_a = this.data.columns[0]) == null ? void 0 : _a.id;
      if (!defaultColumnId) {
        console.warn("Cannot add filter: No columns exist.");
        return;
      }
      const newRule = {
        id: `filter_${Date.now()}`,
        columnId: defaultColumnId,
        operator: "contains",
        value: ""
      };
      const currentRules = this.getCurrentFilterRules();
      currentRules.push(newRule);
      this.setCurrentFilterRules(currentRules);
      this.rebuildFilterListUI(filtersContainer, popup);
      this.applyFiltersAndRerender();
    });
    const closePopup = () => {
      popup.remove();
      document.removeEventListener("click", clickOutside, true);
    };
    const clickOutside = (e) => {
      if (!popup.contains(e.target) && !button.contains(e.target)) {
        closePopup();
      }
    };
    setTimeout(() => {
      document.addEventListener("click", clickOutside, true);
    }, 0);
  }
  /** Helper to rebuild the filter rows UI within the popup */
  rebuildFilterListUI(filtersContainer, popupElement) {
    filtersContainer.empty();
    const currentRules = this.getCurrentFilterRules();
    if (currentRules.length === 0) {
      filtersContainer.createDiv({ text: "No filters applied", cls: "json-table-filter-empty" });
    } else {
      currentRules.forEach((rule, index) => {
        this.renderFilterRow(filtersContainer, rule, index);
      });
    }
  }
  /** Renders a single row in the filter popup */
  renderFilterRow(container, rule, index) {
    const rowDiv = container.createDiv({ cls: "json-table-filter-row" });
    const columnSelect = rowDiv.createEl("select", { cls: "json-table-popup-select" });
    this.data.columns.forEach((col) => {
      const option = columnSelect.createEl("option", { text: col.name, value: col.id });
      if (col.id === rule.columnId) option.selected = true;
    });
    columnSelect.addEventListener("change", () => {
      rule.columnId = columnSelect.value;
      this.applyFiltersAndRerender();
    });
    const operatorSelect = rowDiv.createEl("select", { cls: "json-table-popup-select" });
    const operators = [
      { label: "Contains", value: "contains" },
      { label: "Does not contain", value: "doesNotContain" },
      { label: "Starts with", value: "startsWith" },
      { label: "Ends with", value: "endsWith" },
      { label: "Is empty", value: "isEmpty" },
      { label: "Is not empty", value: "isNotEmpty" },
      { label: "Equals", value: "equals" },
      { label: "Not equal", value: "notEqual" }
    ];
    operators.forEach((op) => {
      const option = operatorSelect.createEl("option", { text: op.label, value: op.value });
      if (op.value === rule.operator) option.selected = true;
    });
    operatorSelect.addEventListener("change", () => {
      rule.operator = operatorSelect.value;
      valueInput.style.display = rule.operator === "isEmpty" || rule.operator === "isNotEmpty" ? "none" : "";
      this.applyFiltersAndRerender();
    });
    const valueInput = rowDiv.createEl("input", {
      type: "text",
      value: rule.value || "",
      cls: "json-table-popup-input"
    });
    valueInput.style.display = rule.operator === "isEmpty" || rule.operator === "isNotEmpty" ? "none" : "";
    valueInput.addEventListener("blur", () => {
      rule.value = valueInput.value;
      this.applyFiltersAndRerender();
    });
    valueInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        rule.value = valueInput.value;
        this.applyFiltersAndRerender();
      }
    });
    const deleteButton = rowDiv.createEl("button", { cls: "json-table-delete-filter-button" });
    const trashIcon = createIconElement(ICON_NAMES.trash, 14);
    deleteButton.appendChild(trashIcon);
    deleteButton.addEventListener("click", async () => {
      const currentRules = this.getCurrentFilterRules();
      currentRules.splice(index, 1);
      this.setCurrentFilterRules(currentRules);
      await this.view.saveTableData(this.data);
      this.triggerRender();
      const parentPopup = container.closest(".json-table-filter-popup");
      const filtersListContainer = parentPopup == null ? void 0 : parentPopup.querySelector(".json-table-filters-list");
      if (filtersListContainer && parentPopup) {
        this.rebuildFilterListUI(filtersListContainer, parentPopup);
      } else {
        console.error("Could not find filter list container/popup to re-render after delete.");
      }
    });
  }
  // End renderFilterRow
  // --- Filtering Logic ---
  /** Applies filters, saves the data, and triggers a table re-render */
  async applyFiltersAndRerender() {
    try {
      await this.view.saveTableData(this.data);
      this.triggerRender();
    } catch (error) {
      console.error("Error saving data after filter change:", error);
    }
  }
  /**
   * Filters the full row data based on current rules defined in the view.
   * @returns A new array containing only the rows that match ALL active filters.
   */
  getFilteredRows() {
    const rules = this.getCurrentFilterRules();
    if (rules.length === 0) {
      return this.data.rows;
    }
    return this.data.rows.filter((row) => {
      return rules.every((rule) => {
        const cell = row.find((c) => c.column === rule.columnId);
        const cellValue = (cell == null ? void 0 : cell.value) || "";
        const filterValue = rule.value || "";
        const cellValueLower = cellValue.toLowerCase();
        const filterValueLower = filterValue.toLowerCase();
        switch (rule.operator) {
          case "contains":
            return cellValueLower.includes(filterValueLower);
          case "doesNotContain":
            return !cellValueLower.includes(filterValueLower);
          case "startsWith":
            return cellValueLower.startsWith(filterValueLower);
          case "endsWith":
            return cellValueLower.endsWith(filterValueLower);
          case "isEmpty":
            return cellValue === "";
          // Check exact empty string
          case "isNotEmpty":
            return cellValue !== "";
          case "equals":
            return cellValueLower === filterValueLower;
          // Case-insensitive equals
          case "notEqual":
            return cellValueLower !== filterValueLower;
          // Case-insensitive not equal
          default:
            console.warn(`Unknown filter operator: ${rule.operator}`);
            return true;
        }
      });
    });
  }
  // End getFilteredRows
  /** Checks if any filters are currently active */
  hasActiveFilters() {
    return this.getCurrentFilterRules().length > 0;
  }
};

// src/TableRenderer.ts
var TYPE_ICONS = {
  text: ICON_NAMES.text,
  dropdown: ICON_NAMES.dropdown,
  multiselect: ICON_NAMES.multiselect,
  checkbox: ICON_NAMES.checkbox,
  date: ICON_NAMES.date,
  notelink: ICON_NAMES.link
};
var TableRenderer = class {
  // Add FilterHandler instance
  constructor(container, data, view) {
    this.container = container;
    this.data = data;
    this.view = view;
    this.isResizing = false;
    this.colGroup = null;
    this.cellRenderers = /* @__PURE__ */ new Map();
    this.registerRenderers();
    this.columnEditors = /* @__PURE__ */ new Map();
    this.registerColumnEditors();
    this.sortHandler = new SortHandler(this.data, () => this.render(), this.view);
    this.filterHandler = new FilterHandler(this.data, () => this.render(), this.view);
  }
  // --- Registration ---
  registerRenderers() {
    this.cellRenderers.set("text", new TextRenderer());
    this.cellRenderers.set("checkbox", new CheckboxRenderer());
    this.cellRenderers.set("dropdown", new DropdownRenderer());
    this.cellRenderers.set("multiselect", new MultiSelectRenderer());
    this.cellRenderers.set("notelink", new NoteLinkRenderer());
    this.cellRenderers.set("date", new DateRenderer());
  }
  registerColumnEditors() {
    this.columnEditors.set("text", new TextColumnEditor());
    this.columnEditors.set("checkbox", new TextColumnEditor());
    this.columnEditors.set("dropdown", new DropdownColumnEditor());
    this.columnEditors.set("multiselect", new DropdownColumnEditor());
    this.columnEditors.set("notelink", new NoteLinkColumnEditor());
    this.columnEditors.set("date", new DateColumnEditor());
  }
  // --- Rename Input Rendering ---
  renderRenameInput() {
    const renameContainer = this.container.createDiv({ cls: "json-table-rename-container" });
    const currentFilePath = this.view.getFilePath();
    if (!currentFilePath) return;
    const fileName = currentFilePath.substring(currentFilePath.lastIndexOf("/") + 1);
    const nameWithoutExt = fileName.replace(/\.(table\.json|table\.md)$/, "");
    const renameInput = renameContainer.createEl("input", {
      type: "text",
      cls: "json-table-rename-input",
      value: nameWithoutExt,
      placeholder: "Table name"
    });
    renameInput.addEventListener("blur", async () => {
      const newName = renameInput.value.trim();
      if (newName && newName !== nameWithoutExt) {
        const success = await this.view.renameFile(newName);
        if (!success) {
          renameInput.value = nameWithoutExt;
        }
      } else if (!newName) {
        renameInput.value = nameWithoutExt;
      }
    });
    renameInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        renameInput.blur();
      } else if (e.key === "Escape") {
        e.preventDefault();
        renameInput.value = nameWithoutExt;
        renameInput.blur();
      }
    });
  }
  // --- Main Render ---
  render() {
    var _a, _b;
    const existingWrapper = this.container.querySelector(".json-table-wrapper");
    const scrollLeft = (_a = existingWrapper == null ? void 0 : existingWrapper.scrollLeft) != null ? _a : 0;
    const scrollTop = (_b = existingWrapper == null ? void 0 : existingWrapper.scrollTop) != null ? _b : 0;
    this.container.empty();
    this.renderRenameInput();
    const controlsContainer = this.container.createDiv({ cls: "json-table-controls" });
    const sortButton = controlsContainer.createEl("button", {
      cls: "json-table-btn json-table-btn--standard json-table-sort-button",
      attr: { "aria-label": "Sort table" }
    });
    const sortIcon = createIconElement(ICON_NAMES.sort, 16, "icon-sort");
    sortButton.appendChild(sortIcon);
    sortButton.appendText(" Sort");
    sortButton.addEventListener("click", () => {
      this.sortHandler.showSortPopup(sortButton);
    });
    const filterButton = controlsContainer.createEl("button", {
      cls: "json-table-btn json-table-btn--standard json-table-filter-button"
    });
    const filterIcon = createIconElement(ICON_NAMES.filter, 16, "icon-filter");
    filterButton.appendChild(filterIcon);
    filterButton.appendText(" Filter");
    if (this.filterHandler.hasActiveFilters()) {
      filterButton.addClass("json-table-btn--active");
    }
    filterButton.addEventListener("click", () => {
      this.filterHandler.showFilterPopup(filterButton);
    });
    const tableWrapper = this.container.createEl("div", { cls: "json-table-wrapper" });
    const table = tableWrapper.createEl("table", { cls: "json-table" });
    this.sortHandler.sortDataInMemory();
    const rowsToRender = this.filterHandler.getFilteredRows();
    this.colGroup = table.createEl("colgroup");
    this.renderColGroup();
    this.renderHeader(table);
    this.renderBody(table, rowsToRender);
    this.renderAddRowButton(this.container);
    requestAnimationFrame(() => {
      tableWrapper.scrollLeft = scrollLeft;
      tableWrapper.scrollTop = scrollTop;
    });
  }
  // --- Column Group Rendering ---
  renderColGroup() {
    if (!this.colGroup) return;
    const colGroupEl = this.colGroup;
    colGroupEl.empty();
    this.data.columns.forEach((colDef, index) => {
      const col = colGroupEl.createEl("col");
      col.style.width = colDef.width ? `${colDef.width}px` : `150px`;
      col.setAttribute("data-col-index", index.toString());
    });
    const buttonsCol = colGroupEl.createEl("col");
    buttonsCol.style.width = "125px";
  }
  // --- Header Rendering ---
  renderHeader(table) {
    const thead = table.createEl("thead");
    const headerRow = thead.createEl("tr");
    let draggedColumnIndex = null;
    this.data.columns.forEach((col, colIndex) => {
      const th = headerRow.createEl("th", { cls: "json-table-header-cell" });
      th.draggable = true;
      th.setAttribute("data-col-index", colIndex.toString());
      const contentWrapper = th.createEl("div", { cls: "json-table-header-content" });
      const iconSvg = TYPE_ICONS[col.type];
      if (iconSvg) {
        const iconEl = createIconElement(iconSvg, 14, `icon-col-${col.type}`);
        if (iconEl) contentWrapper.appendChild(iconEl);
      }
      contentWrapper.appendText(col.name);
      const resizeHandle = th.createEl("div", { cls: "json-table-resize-handle" });
      resizeHandle.addEventListener("mousedown", (e) => {
        this.onResizeStart(e, col, colIndex);
      });
      th.addEventListener("dragstart", (e) => {
        if (e.target.classList.contains("json-table-resize-handle")) {
          e.preventDefault();
          return;
        }
        if (e.dataTransfer) {
          e.dataTransfer.effectAllowed = "move";
          draggedColumnIndex = colIndex;
          th.classList.add("is-dragging");
        }
      });
      th.addEventListener("dragover", (e) => {
        e.preventDefault();
        if (e.dataTransfer) e.dataTransfer.dropEffect = "move";
        th.classList.add("is-dragover");
      });
      th.addEventListener("dragleave", () => th.classList.remove("is-dragover"));
      th.addEventListener("drop", (e) => {
        e.preventDefault();
        th.classList.remove("is-dragover");
        if (draggedColumnIndex === null) return;
        const targetColumnIndex = colIndex;
        if (draggedColumnIndex === targetColumnIndex) return;
        const draggedColumn = this.data.columns.splice(draggedColumnIndex, 1)[0];
        this.data.columns.splice(targetColumnIndex, 0, draggedColumn);
        this.view.saveTableData(this.data);
        this.render();
      });
      th.addEventListener("dragend", () => {
        th.classList.remove("is-dragging");
        draggedColumnIndex = null;
      });
      th.addEventListener("click", (e) => {
        if (this.isResizing) {
          this.isResizing = false;
          return;
        }
        if (e.target.classList.contains("json-table-resize-handle")) {
          return;
        }
        e.stopPropagation();
        this.showEditColumnDialog(th, col, this.data, colIndex);
      });
    });
    const buttonsTh = headerRow.createEl("th", { cls: "json-table-header-sticky json-table-buttons-th" });
    const buttonContainer = buttonsTh.createEl("div", { cls: "json-table-header-buttons-container" });
    const addColBtnDiv = buttonContainer.createEl("div", { cls: "json-table-btn json-table-btn--icon", attr: { "aria-label": "Add column", title: "Add column" } });
    const plusIcon = createIconElement(ICON_NAMES.plus, 18);
    addColBtnDiv.appendChild(plusIcon);
    let isAddColPopupOpen = false;
    addColBtnDiv.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (isAddColPopupOpen) return;
      isAddColPopupOpen = true;
      this.showAddColumnDialog(buttonsTh, addColBtnDiv, this.data, () => {
        isAddColPopupOpen = false;
      });
    });
  }
  // --- Body Rendering ---
  renderBody(table, rowsToRender) {
    const tbody = table.createEl("tbody");
    rowsToRender.forEach((row) => {
      const tr = tbody.createEl("tr", { cls: "json-table-row" });
      const originalRowIndex = this.data.rows.findIndex((originalRow) => originalRow === row);
      this.renderRow(tr, row, this.data.columns, originalRowIndex, this.data);
      const deleteCell = tr.createEl("td", { cls: "json-table-row-actions-cell" });
      const cellContent = deleteCell.createEl("div", { cls: "json-table-cell-content" });
      const deleteButton = cellContent.createEl("div", { cls: "json-table-btn json-table-btn--icon", attr: { "aria-label": "Delete row", title: "Delete row" } });
      const trashIcon = createIconElement(ICON_NAMES.trash, 16);
      deleteButton.appendChild(trashIcon);
      deleteButton.addEventListener("click", async (e) => {
        e.stopPropagation();
        if (originalRowIndex > -1) {
          this.data.rows.splice(originalRowIndex, 1);
          await this.view.saveTableData(this.data);
          this.render();
        } else {
          console.error("Could not find original row index for deletion while filtered.");
        }
      });
    });
  }
  renderRow(tr, row, columns, originalRowIndex, data) {
    const cellMap = /* @__PURE__ */ new Map();
    row.forEach((cell) => cellMap.set(cell.column, cell.value));
    columns.forEach((col) => {
      const value = cellMap.get(col.id) || "";
      const td = tr.createEl("td", { cls: "json-table-cell" });
      let renderer = this.cellRenderers.get(col.type) || this.cellRenderers.get("text");
      if (!renderer) {
        return;
      }
      const onCellChange = async (newValue) => {
        const cellData = row.find((c) => c.column === col.id);
        if (cellData) {
          cellData.value = newValue;
        } else {
          row.push({ column: col.id, value: newValue });
        }
        await this.view.saveTableData(data);
        if (this.sortHandler.getCurrentSortRules().some((rule) => rule.columnId === col.id) || this.filterHandler.hasActiveFilters()) {
          this.render();
        }
      };
      renderer.render(this.view.app, td, value, col, onCellChange);
    });
  }
  // --- Add Row Button ---
  renderAddRowButton(container) {
    const addRowBtn = container.createEl("div", { cls: "json-table-add-row" });
    const content = addRowBtn.createDiv({ cls: "json-table-btn json-table-btn--hybrid" });
    const plusIcon = createIconElement(ICON_NAMES.plus, 16);
    content.appendChild(plusIcon);
    content.createSpan({ text: "Add row", cls: "json-table-add-row-text" });
    addRowBtn.addEventListener("click", async () => {
      let newRowData = {};
      this.data.columns.forEach((col) => {
        newRowData[col.id] = col.type === "checkbox" ? "false" : "";
      });
      const activeFilters = this.filterHandler.getCurrentFilterRules();
      activeFilters.forEach((rule) => {
        if (rule.operator === "equals" && rule.value && newRowData.hasOwnProperty(rule.columnId)) {
          newRowData[rule.columnId] = rule.value;
        }
      });
      const newRow = Object.entries(newRowData).map(([colId, val]) => ({
        column: colId,
        value: val
      }));
      this.data.rows.push(newRow);
      await this.view.saveTableData(this.data);
      this.render();
    });
  }
  // --- Column Resizing ---
  onResizeStart(e, column, colIndex) {
    if (!this.colGroup) return;
    this.isResizing = true;
    e.preventDefault();
    e.stopPropagation();
    const colElement = this.colGroup.querySelector(`col[data-col-index="${colIndex}"]`);
    if (!colElement) {
      this.isResizing = false;
      return;
    }
    const startX = e.clientX;
    const startWidth = colElement.offsetWidth;
    const onMouseMove = (moveE) => {
      const newWidth = startWidth + (moveE.clientX - startX);
      if (newWidth > 40) colElement.style.width = `${newWidth}px`;
    };
    const onMouseUp = () => {
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", onMouseUp);
      const finalWidth = colElement.offsetWidth;
      column.width = finalWidth;
      this.view.saveTableData(this.data);
      setTimeout(() => {
        this.isResizing = false;
      }, 0);
    };
    document.addEventListener("mousemove", onMouseMove);
    document.addEventListener("mouseup", onMouseUp);
  }
  // --- Popups: Edit/Add Column ---
  showEditColumnDialog(headerCell, column, data, colIndex) {
    const existingPopup = document.querySelector(".json-table-edit-column-popup");
    if (existingPopup) existingPopup.remove();
    const popup = document.body.createEl("div", { cls: "json-table-popup json-table-edit-column-popup" });
    const rect = headerCell.getBoundingClientRect();
    popup.style.top = `${rect.bottom + 5}px`;
    popup.style.left = `${rect.left}px`;
    const wrapper = popup.createEl("div", { cls: "json-table-popup-wrapper" });
    const nameInput = wrapper.createEl("input", { type: "text", cls: "json-table-edit-input", value: column.name, placeholder: "Column name" });
    const editorContainer = wrapper.createEl("div", { cls: "json-table-column-editor-container" });
    let editor = this.columnEditors.get(column.type) || this.columnEditors.get("text");
    if (editor) editor.render(editorContainer, column, this.data, this.view);
    const deleteBtn = wrapper.createEl("button", { cls: "json-table-btn json-table-btn--hybrid json-table-btn---delete-column" });
    const deleteIcon = createIconElement(ICON_NAMES.trash, 16);
    deleteBtn.appendChild(deleteIcon);
    deleteBtn.appendText("Delete Column");
    nameInput.focus();
    nameInput.select();
    const closePopup = () => {
      popup.remove();
      document.removeEventListener("click", clickOutside);
    };
    const saveColumnName = async () => {
      const newName = nameInput.value.trim();
      let nameChanged = false;
      if (newName && newName !== column.name) {
        column.name = newName;
        nameChanged = true;
      }
      if (nameChanged) {
        await this.view.saveTableData(data);
        const contentWrapper = headerCell.querySelector(".json-table-header-content");
        const textNode = contentWrapper ? Array.from(contentWrapper.childNodes).find((node) => node.nodeType === Node.TEXT_NODE) : null;
        if (textNode) {
          textNode.textContent = newName;
        } else {
          console.warn("Could not find text node to update header name.");
        }
        this.render();
      }
      closePopup();
    };
    const deleteColumn = async () => {
      data.columns.splice(colIndex, 1);
      data.rows.forEach((row) => {
        const i = row.findIndex((c) => c.column === column.id);
        if (i !== -1) row.splice(i, 1);
      });
      await this.view.saveTableData(data);
      this.render();
      closePopup();
    };
    deleteBtn.addEventListener("mousedown", (e) => e.preventDefault());
    deleteBtn.addEventListener("click", async (e) => {
      e.stopPropagation();
      e.preventDefault();
      document.removeEventListener("click", clickOutside);
      await deleteColumn();
    });
    nameInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        saveColumnName();
      } else if (e.key === "Escape") {
        e.preventDefault();
        closePopup();
      }
    });
    const clickOutside = (e) => {
      if (!popup.contains(e.target) && !headerCell.contains(e.target)) {
        saveColumnName();
      }
    };
    setTimeout(() => {
      document.addEventListener("click", clickOutside);
    }, 100);
  }
  showAddColumnDialog(headerCell, buttonDiv, data, onClose) {
    buttonDiv.style.opacity = "0.5";
    const popup = document.body.createEl("div", { cls: "json-table-popup json-table-column-popup" });
    const rect = buttonDiv.getBoundingClientRect();
    popup.style.top = `${rect.top}px`;
    popup.style.right = `${document.body.clientWidth - rect.right}px`;
    const wrapper = popup.createEl("div", { cls: "json-table-popup-wrapper" });
    const nameInputPopup = wrapper.createEl("input", { type: "text", cls: "json-table-edit-input", placeholder: "New column name" });
    setTimeout(() => nameInputPopup.focus(), 50);
    wrapper.createEl("div", { text: "Select column type:", cls: "json-table-popup-label" });
    const typeButtonsContainer = wrapper.createEl("div", { cls: "json-table-type-buttons" });
    const types = [
      /* ... type definitions ... */
      { type: "text", name: "Text", icon: ICON_NAMES.text },
      { type: "checkbox", name: "Checkbox", icon: ICON_NAMES.checkbox },
      { type: "dropdown", name: "Dropdown", icon: ICON_NAMES.dropdown },
      { type: "multiselect", name: "Multi-select", icon: ICON_NAMES.multiselect },
      { type: "notelink", name: "Note Link", icon: ICON_NAMES.link },
      { type: "date", name: "Date", icon: ICON_NAMES.date }
    ];
    const defaultDropdownOptions = [
      /* ... default options ... */
      { value: "To Do", style: "red" },
      { value: "In Progress", style: "blue" },
      { value: "Done", style: "green" }
    ];
    types.forEach(({ type, name, icon }) => {
      const btnDiv = typeButtonsContainer.createEl("div", { cls: "json-table-btn json-table-btn--hybrid", attr: { role: "button", tabindex: 0 } });
      const iconEl = createIconElement(icon, 16, `icon-type-${type}`);
      if (iconEl) btnDiv.appendChild(iconEl);
      btnDiv.appendText(name);
      const addAction = () => {
        let extraProps = {};
        if (type === "dropdown" || type === "multiselect") extraProps = { typeOptions: { options: defaultDropdownOptions } };
        if (type === "date") extraProps = { dateFormat: "YYYY/MM/DD" };
        addColumn(type, name, extraProps);
      };
      btnDiv.addEventListener("click", addAction);
      btnDiv.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          addAction();
        }
      });
    });
    const closePopup = () => {
      popup.remove();
      buttonDiv.style.opacity = "1";
      document.removeEventListener("click", clickOutside);
      document.removeEventListener("keydown", handleEscape);
      onClose();
    };
    const addColumn = async (columnType, typeName, extraProps = {}) => {
      let columnName = nameInputPopup.value.trim() || typeName;
      const columnId = "col_" + Date.now();
      data.columns.push({ id: columnId, name: columnName, type: columnType, width: 150, ...extraProps });
      data.rows.forEach((row) => row.push({ column: columnId, value: "" }));
      await this.view.saveTableData(data);
      this.render();
      closePopup();
    };
    const clickOutside = (e) => {
      if (!popup.contains(e.target) && !buttonDiv.contains(e.target)) {
        closePopup();
      }
    };
    const handleEscape = (e) => {
      if (e.key === "Escape") {
        closePopup();
      }
    };
    nameInputPopup.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        addColumn("text", "Text", {});
      }
    });
    setTimeout(() => {
      document.addEventListener("click", clickOutside);
      document.addEventListener("keydown", handleEscape);
    }, 100);
  }
};

// src/fileHandlers/JsonFileHandler.ts
var JsonFileHandler = class {
  constructor(app) {
    this.app = app;
  }
  async read(file) {
    const content = await this.app.vault.read(file);
    if (!content) {
      console.warn(`File is empty: ${file.path}. Returning default structure.`);
      return {
        columns: [],
        rows: [],
        views: [{ id: "default_" + Date.now(), name: "Default", sort: [], filter: [] }]
      };
    }
    try {
      let data = JSON.parse(content);
      if (!data.views || !Array.isArray(data.views) || data.views.length === 0) {
        data.views = [{
          id: "default_" + Date.now(),
          name: "Default",
          sort: [],
          filter: []
          // hiddenColumns: [] // Add if implementing hidden columns later
        }];
        if (!data.views[0].sort) data.views[0].sort = [];
        if (!data.views[0].filter) data.views[0].filter = [];
      } else {
        if (!data.views[0].sort) data.views[0].sort = [];
        if (!data.views[0].filter) data.views[0].filter = [];
      }
      let migrationNeeded = false;
      data.columns.forEach((col) => {
        if (!col.typeOptions) {
          migrationNeeded = true;
          col.typeOptions = {};
          const oldCol = col;
          if (col.type === "date" && oldCol.dateFormat) {
            col.typeOptions.dateFormat = oldCol.dateFormat;
            delete oldCol.dateFormat;
          }
          if ((col.type === "dropdown" || col.type === "multiselect") && oldCol.options) {
            col.typeOptions.options = oldCol.options;
            delete oldCol.options;
          }
          if (col.type === "notelink" && oldCol.suggestAllFiles !== void 0) {
            col.typeOptions.suggestAllFiles = oldCol.suggestAllFiles;
            delete oldCol.suggestAllFiles;
          }
        }
      });
      if (migrationNeeded) {
      }
      if (!data.columns || !data.rows || !data.views) {
        throw new Error("Invalid table JSON structure: missing columns, rows, or views after migration.");
      }
      return data;
    } catch (e) {
      console.error(`Error parsing JSON file ${file.path}:`, e);
      throw new Error(`Invalid JSON: ${e.message}`);
    }
  }
  async save(file, data) {
    try {
      if (!data.views || data.views.length === 0) {
        data.views = [{ id: "default_" + Date.now(), name: "Default", sort: [], filter: [] }];
      }
      if (!data.views[0].sort) data.views[0].sort = [];
      if (!data.views[0].filter) data.views[0].filter = [];
      data.columns.forEach((col) => {
        if (!col.typeOptions) col.typeOptions = {};
      });
      const jsonString = JSON.stringify(data, null, 2);
      await this.app.vault.modify(file, jsonString);
    } catch (e) {
      console.error(`Error saving JSON file ${file.path}:`, e);
      throw new Error(`Failed to save file: ${e.message}`);
    }
  }
};

// src/fileHandlers/MarkdownFileHandler.ts
var import_obsidian5 = require("obsidian");
var CODE_BLOCK_START = "```json-table";
var CODE_BLOCK_END = "```";
var JSON_CODE_BLOCK_REGEX = new RegExp(
  // Match start, optional whitespace/newline, capture content (non-greedy), optional whitespace/newline, match end
  `${CODE_BLOCK_START}\\s*\\n?([\\s\\S]*?)\\n?\\s*${CODE_BLOCK_END}`
);
var FRONTMATTER_PLUGIN_KEY = "json-table-plugin";
var FRONTMATTER_LINKS_KEY = "table-links";
var MarkdownFileHandler = class {
  constructor(app) {
    this.app = app;
  }
  /**
   * Reads the .table.md file, verifies frontmatter, and extracts JSON data.
   */
  async read(file) {
    const content = await this.app.vault.read(file);
    let frontmatter = {};
    if (content.startsWith("---")) {
      const fmMatch = content.match(/^---\s*([\s\\S]*?)\s*---/);
      if (fmMatch && fmMatch[1]) {
        try {
          frontmatter = (0, import_obsidian5.parseYaml)(fmMatch[1]);
        } catch (e) {
          console.warn(`Could not parse frontmatter in ${file.path}, proceeding without check.`);
        }
      }
    }
    if ((frontmatter == null ? void 0 : frontmatter[FRONTMATTER_PLUGIN_KEY]) !== true) {
      console.warn(`File ${file.path} is missing '${FRONTMATTER_PLUGIN_KEY}: true' in frontmatter.`);
    }
    const match2 = content.match(JSON_CODE_BLOCK_REGEX);
    if (!match2 || match2[1] === void 0 || match2[1] === null) {
      if (!content.includes(CODE_BLOCK_START)) {
        throw new Error(`Could not find '${CODE_BLOCK_START}' code block start in ${file.path}`);
      } else if (!content.substring(content.indexOf(CODE_BLOCK_START)).includes(CODE_BLOCK_END)) {
        throw new Error(`Found '${CODE_BLOCK_START}' but no closing '${CODE_BLOCK_END}' in ${file.path}`);
      } else {
        const startIndex = content.indexOf(CODE_BLOCK_START);
        console.error("Regex failed despite markers present. Content around block:\n", content.substring(Math.max(0, startIndex - 20), startIndex + 100));
        throw new Error(`Could not extract content from '${CODE_BLOCK_START}' code block in ${file.path}. Check for malformed block or unexpected characters.`);
      }
    }
    const jsonContent = match2[1].trim();
    if (!jsonContent) {
      console.warn(`Empty json-table code block found in ${file.path}. Returning default structure.`);
      return { columns: [], rows: [], views: [{ id: "default_" + Date.now(), name: "Default", sort: [], filter: [] }] };
    }
    try {
      const data = JSON.parse(jsonContent);
      if (!data || typeof data !== "object" || !Array.isArray(data.columns) || !Array.isArray(data.rows)) {
        throw new Error("Invalid table JSON structure: missing columns or rows.");
      }
      if (!data.views || !Array.isArray(data.views) || data.views.length === 0) {
        data.views = [{
          id: "default_" + Date.now(),
          name: "Default",
          sort: [],
          filter: []
          // hiddenColumns: [] // Add if needed
        }];
      }
      if (!data.views[0].sort) {
        data.views[0].sort = [];
      }
      data.columns.forEach((col) => {
        if (!col.typeOptions) {
          col.typeOptions = {};
          if (col.dateFormat) {
            col.typeOptions.dateFormat = col.dateFormat;
            delete col.dateFormat;
          }
          if (col.options) {
            col.typeOptions.options = col.options;
            delete col.options;
          }
          if (col.suggestAllFiles !== void 0) {
            col.typeOptions.suggestAllFiles = col.suggestAllFiles;
            delete col.suggestAllFiles;
          }
        }
      });
      return data;
    } catch (e) {
      console.error(`Error parsing embedded JSON in ${file.path}:`, jsonContent.substring(0, 500), e);
      throw new Error(`Invalid embedded JSON: ${e.message}`);
    }
  }
  /**
   * Saves the TableData into the .table.md file, updating frontmatter and code block.
   */
  async save(file, data) {
    try {
      const jsonString = JSON.stringify(data, null, 2);
      const linkPaths = this.extractLinkPaths(data);
      const existingContent = await this.app.vault.read(file);
      let newContent = this.updateMarkdownContent(existingContent, jsonString, linkPaths);
      await this.app.vault.modify(file, newContent);
    } catch (e) {
      console.error(`Error saving Markdown file ${file.path}:`, e);
      throw new Error(`Failed to save Markdown file: ${e.message}`);
    }
  }
  /** Extracts unique, non-empty paths from notelink columns */
  extractLinkPaths(data) {
    const linkPaths = /* @__PURE__ */ new Set();
    const linkColumnIds = data.columns.filter((col) => col.type === "notelink").map((col) => col.id);
    if (linkColumnIds.length === 0) {
      return [];
    }
    data.rows.forEach((row) => {
      row.forEach((cell) => {
        if (linkColumnIds.includes(cell.column) && cell.value) {
          linkPaths.add(cell.value);
        }
      });
    });
    return Array.from(linkPaths);
  }
  /** Updates or creates frontmatter and replaces the JSON code block in markdown content */
  updateMarkdownContent(existingContent, newJsonString, linkPaths) {
    let frontmatter = {};
    let body = existingContent;
    if (existingContent.startsWith("---")) {
      const fmMatch = existingContent.match(/^---\s*([\s\S]*?)\s*---/);
      if (fmMatch && fmMatch[1]) {
        try {
          frontmatter = (0, import_obsidian5.parseYaml)(fmMatch[1]) || {};
          body = existingContent.substring(fmMatch[0].length).trimStart();
        } catch (e) {
          console.warn(`Could not parse existing frontmatter in file, preserving original body structure. Error: ${e}`);
          frontmatter = {};
          body = existingContent;
        }
      } else {
        body = existingContent;
      }
    } else {
      body = existingContent;
    }
    frontmatter[FRONTMATTER_PLUGIN_KEY] = true;
    frontmatter[FRONTMATTER_LINKS_KEY] = linkPaths.map((path) => `[[${path}]]`);
    const newFrontmatterString = `---
${(0, import_obsidian5.stringifyYaml)(frontmatter)}---
`;
    let newBody = body;
    const match2 = body.match(JSON_CODE_BLOCK_REGEX);
    const newCodeBlock = `${CODE_BLOCK_START}
${newJsonString}
${CODE_BLOCK_END}`;
    if (match2) {
      const contentOutsideBlock = body.replace(JSON_CODE_BLOCK_REGEX, "").trim();
      const commentRegex = /<!--[\s\S]*?-->/g;
      const nonCommentContent = contentOutsideBlock.replace(commentRegex, "").trim();
      if (!nonCommentContent || nonCommentContent.startsWith("##")) {
        newBody = body.replace(JSON_CODE_BLOCK_REGEX, newCodeBlock);
      } else {
        newBody = body.replace(JSON_CODE_BLOCK_REGEX, newCodeBlock);
      }
    } else {
      console.warn("No json-table code block found in body, appending new one.");
      newBody = (body.trim() ? body.trim() + "\n\n" : "") + newCodeBlock;
    }
    return newFrontmatterString + newBody.trim() + "\n";
  }
};

// src/JsonTableView.ts
var JsonTableView = class extends import_obsidian6.ItemView {
  constructor(leaf) {
    super(leaf);
    this.renderer = null;
    this.fileHandler = null;
    this.data = null;
    this.settings = DEFAULT_SETTINGS;
    // Keep track of the file associated via state
    this.currentFilePath = null;
  }
  getFilePath() {
    return this.currentFilePath;
  }
  // --- Core View Methods ---
  getViewType() {
    return VIEW_TYPE_JSON_TABLE;
  }
  getDisplayText() {
    const path = this.currentFilePath;
    if (path) {
      const base = path.substring(path.lastIndexOf("/") + 1);
      return base.replace(/\.(table\.json|table\.md)$/, "") || "Table";
    }
    return "Table";
  }
  getIcon() {
    return "table";
  }
  // --- Settings ---
  setSettings(settings) {
    this.settings = settings;
    if (this.currentFilePath && this.app.workspace.activeLeaf === this.leaf) {
      this.loadFileAndRender(this.currentFilePath);
    }
  }
  // --- State Management (Replaces FileView's file handling) ---
  async setState(state, result) {
    const newFilePath = state.file || null;
    const fileChanged = newFilePath !== this.currentFilePath;
    this.currentFilePath = newFilePath;
    await super.setState(state, result);
    if (this.currentFilePath && (fileChanged || !this.data)) {
      await this.loadFileAndRender(this.currentFilePath);
    } else if (!this.currentFilePath) {
      const container = this.containerEl.children[1];
      if (container) {
        this.showError(container, "No file specified in view state.", false);
      }
    } else {
    }
  }
  // async setState(state: any, result: ViewStateResult): Promise<void> {
  //     const newFilePath = state.file || null;
  //     const fileChanged = newFilePath !== this.currentFilePath;
  //     this.currentFilePath = newFilePath;
  //     // Call parent setState
  //     await super.setState(state, result);
  //     // Show loading immediately if we have a file to load
  //     if (this.currentFilePath && (fileChanged || !this.data)) {
  //         // Show loading screen
  //         const container = this.containerEl.children[1];
  //         if (container) {
  //             container.empty();
  //             container.addClass('json-table-view-container');
  //             const loadingDiv = container.createEl('div', { cls: 'json-table-loading' });
  //             loadingDiv.createEl('div', { text: 'Loading table...', cls: 'json-table-loading-text' });
  //         }
  //         await this.loadFileAndRender(this.currentFilePath);
  //     } else if (!this.currentFilePath) {
  //         const container = this.containerEl.children[1];
  //         if (container) {
  //             this.showError(container, "No file specified in view state.", false);
  //         }
  //     } else {
  //     }
  // }
  getState() {
    return {
      file: this.currentFilePath
    };
  }
  // --- File Loading and Rendering (Triggered Manually) ---
  /** Loads the file based on path and triggers rendering */
  async loadFileAndRender(filePath) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian6.TFile) {
      this.selectFileHandler(file);
      await this.renderContent(file);
    } else {
      console.error(`File not found or is a folder: ${filePath}`);
      this.showError(this.containerEl.children[1], `Cannot load table: File not found at "${filePath}".`, false);
      this.clearView();
    }
  }
  // --- File Handler Logic ---
  /** Selects the appropriate file handler based on file extension and settings */
  selectFileHandler(file) {
    const useMarkdown = this.settings.tableRenderer === "default";
    const isMarkdownTableFile = file.name.endsWith(".table.md");
    const isJsonTableFile = file.name.endsWith(".table.json");
    this.fileHandler = null;
    if (isMarkdownTableFile) {
      if (useMarkdown) {
        this.fileHandler = new MarkdownFileHandler(this.app);
      } else {
      }
    } else if (isJsonTableFile) {
      this.fileHandler = new JsonFileHandler(this.app);
    } else {
    }
  }
  // --- Rendering Logic ---
  /** Reads data using the selected handler and renders the table for a specific file */
  async renderContent(file) {
    const container = this.containerEl.children[1];
    if (!container) return;
    container.empty();
    this.renderer = null;
    this.data = null;
    container.addClass("json-table-view-container");
    if (!this.fileHandler) {
      this.selectFileHandler(file);
    }
    if (!this.fileHandler || !this.checkIfHandlerIsValid(file)) {
      console.warn(`renderContent: No valid file handler for ${file.path} with current settings.`);
      const useMarkdown = this.settings.tableRenderer === "default";
      if (file.name.endsWith(".table.md") && !useMarkdown) {
        this.showError(container, "Set 'Table Renderer' to 'Default' in settings to view this file.", false);
      } else {
        this.showError(container, "This file is not recognized as a valid table type or requires different settings.", true);
      }
      return;
    }
    try {
      this.data = await this.fileHandler.read(file);
      if (!this.data || typeof this.data !== "object" || !Array.isArray(this.data.columns) || !Array.isArray(this.data.rows)) {
        throw new Error("Invalid table data structure received.");
      }
      this.renderer = new TableRenderer(container, this.data, this);
      this.renderer.render();
    } catch (e) {
      console.error(`Error rendering table for ${file.path}:`, e);
      this.clearView();
      this.showError(container, `Error reading table file: ${e.message}`, true);
    }
  }
  // --- Saving Logic ---
  async saveTableData(dataToSave) {
    if (!this.currentFilePath) {
      console.error("Cannot save: No file path associated with the view.");
      this.app.workspace.trigger("notice", "Error: Cannot save, no file loaded.");
      return;
    }
    const file = this.app.vault.getAbstractFileByPath(this.currentFilePath);
    if (!(file instanceof import_obsidian6.TFile)) {
      console.error(`Cannot save: File not found at path "${this.currentFilePath}".`);
      this.app.workspace.trigger("notice", "Error: File to save not found.");
      return;
    }
    this.selectFileHandler(file);
    if (!this.fileHandler || !dataToSave || !this.checkIfHandlerIsValid(file)) {
      console.error("Cannot save: No valid handler, data, or settings mismatch.", { file, handler: this.fileHandler, data: dataToSave });
      this.app.workspace.trigger("notice", "Error: Could not save table data.");
      return;
    }
    try {
      await this.fileHandler.save(file, dataToSave);
      this.data = dataToSave;
    } catch (e) {
      console.error("Error saving table data:", e);
      this.app.workspace.trigger("notice", `Error saving table: ${e.message}`);
    }
  }
  // --- Lifecycle Methods ---
  // Called when view is attached to DOM
  async onOpen() {
    if (this.currentFilePath && !this.renderer) {
      await this.loadFileAndRender(this.currentFilePath);
    } else if (!this.currentFilePath) {
      this.showError(this.containerEl.children[1], "No file loaded.", false);
    }
  }
  // Called when view is detached
  async onClose() {
    this.clearView();
  }
  // --- File Rename ---
  async renameFile(newName) {
    var _a;
    if (!this.currentFilePath) {
      console.error("Cannot rename: No file path associated with the view.");
      return false;
    }
    const currentFile = this.app.vault.getAbstractFileByPath(this.currentFilePath);
    if (!(currentFile instanceof import_obsidian6.TFile)) {
      console.error(`Cannot rename: File not found at path "${this.currentFilePath}".`);
      return false;
    }
    const currentDir = ((_a = currentFile.parent) == null ? void 0 : _a.path) || "";
    const currentFileName = currentFile.name;
    const isTableJson = currentFileName.endsWith(".table.json");
    const isTableMd = currentFileName.endsWith(".table.md");
    if (!isTableJson && !isTableMd) {
      console.error(`Cannot rename: File "${currentFileName}" is not a recognized table file type.`);
      return false;
    }
    const cleanName = newName.replace(/\.(table\.json|table\.md)$/, "");
    const fileExtension = isTableJson ? ".table.json" : ".table.md";
    const newFileName = `${cleanName}${fileExtension}`;
    const newPath = currentDir ? `${currentDir}/${newFileName}` : newFileName;
    if (await this.app.vault.adapter.exists(newPath)) {
      console.error(`Cannot rename: File "${newFileName}" already exists.`);
      return false;
    }
    try {
      await this.app.vault.rename(currentFile, newPath);
      this.currentFilePath = newPath;
      return true;
    } catch (error) {
      console.error("Error renaming file:", error);
      return false;
    }
  }
  // --- Utility ---
  clearView() {
    var _a;
    (_a = this.containerEl.children[1]) == null ? void 0 : _a.empty();
    this.renderer = null;
    this.fileHandler = null;
    this.data = null;
    this.currentFilePath = null;
  }
  /** Checks if the currently selected handler is valid for the file and settings */
  checkIfHandlerIsValid(file) {
    const useMarkdown = this.settings.tableRenderer === "default";
    const isMarkdownTableFile = file.name.endsWith(".table.md");
    const isJsonTableFile = file.name.endsWith(".table.json");
    if (isMarkdownTableFile) {
      return useMarkdown;
    } else if (isJsonTableFile) {
      return true;
    }
    return false;
  }
  showError(container, message2, showOpenAsText = false) {
    if (!container) return;
    container.empty();
    container.addClass("json-table-view-container");
    const errorDiv = container.createEl("div", { cls: "json-table-error" });
    errorDiv.createEl("p", { text: message2 });
    const filePathToShow = this.currentFilePath;
    if (showOpenAsText && filePathToShow) {
      const openAsTextBtn = errorDiv.createEl("button", {
        text: "Open as raw text",
        cls: "json-table-add-row"
      });
      openAsTextBtn.addEventListener("click", () => {
        if (this.leaf) {
          this.leaf.setViewState({
            type: "plaintext",
            state: { file: filePathToShow }
            // Pass file path
          });
        }
      });
    }
  }
};

// src/main.ts
var JsonTablePlugin = class extends import_obsidian7.Plugin {
  // Store settings
  async onload() {
    await this.loadSettings();
    this.registerView(
      VIEW_TYPE_JSON_TABLE,
      (leaf) => {
        const view = new JsonTableView(leaf);
        view.setSettings(this.settings);
        return view;
      }
    );
    this.app.workspace.onLayoutReady(() => {
      this.registerFileExtensions();
    });
    this.addSettingTab(new JsonTableSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file, source, leaf) => {
        var _a;
        const targetIsFolder = !(file instanceof import_obsidian7.TFile);
        if (targetIsFolder) {
          menu.addItem((item) => {
            item.setTitle("New table").setIcon("table").onClick(async () => {
              await this.createNewTable(file);
            });
          });
        } else if (file instanceof import_obsidian7.TFile && file.name.endsWith(".table.md") && leaf) {
          const cache = this.app.metadataCache.getFileCache(file);
          if ((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a["json-table-plugin"]) {
            if (leaf.view.getViewType() !== VIEW_TYPE_JSON_TABLE) {
              menu.addItem((item) => {
                item.setTitle("Open as JSON Table").setIcon("table").onClick(async () => {
                  await leaf.setViewState({
                    type: VIEW_TYPE_JSON_TABLE,
                    state: { file: file.path }
                    // Pass file path in state
                  }, { focus: true });
                });
              });
            }
          }
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, files) => {
        if (files.length === 1 && !(files[0] instanceof import_obsidian7.TFile)) {
          const targetFolder = files[0];
          menu.addItem((item) => {
            item.setTitle("New table").setIcon("table").onClick(async () => {
              await this.createNewTable(targetFolder);
            });
          });
        }
      })
    );
    this.addCommand({
      id: "create-new-table",
      name: "Create new table",
      // checkCallback only shows the command if conditions are met
      checkCallback: (checking) => {
        const activeFile = this.app.workspace.getActiveFile();
        const targetFolder = activeFile ? activeFile.parent : this.app.vault.getRoot();
        if (targetFolder && !(targetFolder instanceof import_obsidian7.TFile)) {
          if (!checking) {
            this.createNewTable(targetFolder);
          }
          return true;
        }
        return false;
      }
    });
    this.registerEvent(
      this.app.vault.on("rename", (file, oldPath) => {
        if (file instanceof import_obsidian7.TFile) {
          this.updateLinksInAllTables(oldPath, file.path);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("delete", (file) => {
        if (file instanceof import_obsidian7.TFile) {
          this.removeLinksInAllTables(file.path);
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", async (file) => {
        var _a;
        if (this.settings.tableRenderer !== "default" || !file || !file.name.endsWith(".table.md")) {
          return;
        }
        let hasTableFrontmatter = false;
        try {
          const content = await this.app.vault.read(file);
          hasTableFrontmatter = /^---\s*\n[\s\S]*?json-table-plugin:\s*true[\s\S]*?\n---/.test(content);
        } catch (readErr) {
          console.error("file-open: Error reading file content:", readErr);
          return;
        }
        if (!hasTableFrontmatter) {
          return;
        }
        let targetLeaf = null;
        const markdownLeaves = this.app.workspace.getLeavesOfType("markdown");
        for (const leaf of markdownLeaves) {
          const viewState = leaf.getViewState();
          if (((_a = viewState.state) == null ? void 0 : _a.file) === file.path) {
            targetLeaf = leaf;
            break;
          }
        }
        if (targetLeaf) {
          try {
            await targetLeaf.setViewState({
              type: VIEW_TYPE_JSON_TABLE,
              state: { file: file.path }
              // Pass file path
            }, { focus: true });
          } catch (err) {
            console.error("file-open: Error during setViewState:", err);
          }
        } else {
        }
      })
    );
  }
  // --- End onload ---
  onunload() {
  }
  // --- File Extension Registration ---
  /** Registers the primary file extensions our view might handle */
  registerFileExtensions() {
    this.registerExtensions(["table.md"], VIEW_TYPE_JSON_TABLE);
    this.registerExtensions(["json"], VIEW_TYPE_JSON_TABLE);
  }
  // --- Settings Loading/Saving ---
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.app.workspace.getLeavesOfType(VIEW_TYPE_JSON_TABLE).forEach((leaf) => {
      if (leaf.view instanceof JsonTableView) {
        leaf.view.setSettings(this.settings);
      }
    });
  }
  // --- File Creation ---
  /** Creates a new table file based on settings in the target folder */
  async createNewTable(targetFolder) {
    if (!targetFolder || targetFolder instanceof import_obsidian7.TFile) {
      console.error("Invalid target folder provided for createNewTable. Using Vault root.");
      targetFolder = this.app.vault.getRoot();
    }
    const colId1 = "col" + Date.now() + "_1";
    const colId2 = "col" + Date.now() + "_2";
    const defaultTable = {
      columns: [{
        id: colId1,
        name: "Column 1",
        type: "text",
        width: 150,
        typeOptions: {}
        // Add empty typeOptions
      }, {
        id: colId2,
        name: "Column 2",
        type: "text",
        width: 150,
        typeOptions: {}
        // Add empty typeOptions
      }],
      rows: [
        [{ column: colId1, value: "" }, { column: colId2, value: "" }]
      ],
      // Add the default views array
      views: [{
        id: "default_" + Date.now(),
        name: "Default",
        sort: [],
        filter: []
        // hiddenColumns: [] // Add if/when implemented
      }]
    };
    let fileName = "";
    let fileContent = "";
    let counter = 1;
    let filePath = "";
    const baseName = "New Table";
    const folderPath = targetFolder.path === "/" ? "" : targetFolder.path;
    if (this.settings.tableRenderer === "default") {
      const extension = ".table.md";
      fileName = `${baseName}${extension}`;
      filePath = folderPath ? `${folderPath}/${fileName}` : fileName;
      while (await this.app.vault.adapter.exists(filePath)) {
        fileName = `${baseName} ${counter}${extension}`;
        filePath = folderPath ? `${folderPath}/${fileName}` : fileName;
        counter++;
      }
      const title = fileName.replace(extension, "");
      const jsonDataString = JSON.stringify(defaultTable, null, 2);
      const frontmatter = `---
json-table-plugin: true
table-links: []
---
`;
      const body = `
## ${title}

<!-- Do not edit the code block below manually -->

\`\`\`json-table
${jsonDataString}
\`\`\`
`;
      fileContent = frontmatter + body;
    } else {
      const extension = ".table.json";
      fileName = `${baseName}${extension}`;
      filePath = folderPath ? `${folderPath}/${fileName}` : fileName;
      while (await this.app.vault.adapter.exists(filePath)) {
        fileName = `${baseName} ${counter}${extension}`;
        filePath = folderPath ? `${folderPath}/${fileName}` : fileName;
        counter++;
      }
      fileContent = JSON.stringify(defaultTable, null, 2);
    }
    try {
      const file = await this.app.vault.create(filePath, fileContent);
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(file);
    } catch (error) {
      console.error(`Error creating table file "${filePath}":`, error);
      new import_obsidian7.Notice("Error creating table file. Check console for details.");
    }
  }
  // --- Link Updating Logic ---
  /** Determines the correct file handler based on file extension */
  getHandlerForFile(file) {
    if (file.name.endsWith(".table.md")) {
      return new MarkdownFileHandler(this.app);
    } else if (file.name.endsWith(".table.json")) {
      return new JsonFileHandler(this.app);
    }
    return null;
  }
  /** Scans all relevant table files and updates links matching oldPath to newPath */
  async updateLinksInAllTables(oldPath, newPath) {
    const allFiles = this.app.vault.getFiles();
    const tableFiles = allFiles.filter((f) => f.name.endsWith(".table.json") || f.name.endsWith(".table.md"));
    if (tableFiles.length === 0) {
      return;
    }
    for (const file of tableFiles) {
      const handler = this.getHandlerForFile(file);
      if (!handler) continue;
      let data = null;
      let dataChanged = false;
      try {
        data = await handler.read(file);
        if (!data || !data.columns || !data.rows) {
          console.warn(`Skipping invalid data structure in ${file.path}`);
          continue;
        }
        const linkColumns = data.columns.filter((col) => col.type === "notelink").map((col) => col.id);
        if (linkColumns.length === 0) continue;
        data.rows.forEach((row) => {
          row.forEach((cell) => {
            if (linkColumns.includes(cell.column) && cell.value === oldPath) {
              cell.value = newPath;
              dataChanged = true;
            }
          });
        });
        if (dataChanged) {
          await handler.save(file, data);
        }
      } catch (e) {
        console.error(`Failed to process links update in ${file.path}:`, e);
      }
    }
  }
  /** Scans all relevant table files and removes links pointing to the deletedPath */
  async removeLinksInAllTables(deletedPath) {
    const allFiles = this.app.vault.getFiles();
    const tableFiles = allFiles.filter((f) => f.name.endsWith(".table.json") || f.name.endsWith(".table.md"));
    if (tableFiles.length === 0) {
      return;
    }
    for (const file of tableFiles) {
      const handler = this.getHandlerForFile(file);
      if (!handler) continue;
      let data = null;
      let dataChanged = false;
      try {
        data = await handler.read(file);
        if (!data || !data.columns || !data.rows) continue;
        const linkColumns = data.columns.filter((col) => col.type === "notelink").map((col) => col.id);
        if (linkColumns.length === 0) continue;
        data.rows.forEach((row) => {
          row.forEach((cell) => {
            if (linkColumns.includes(cell.column) && cell.value === deletedPath) {
              cell.value = "";
              dataChanged = true;
            }
          });
        });
        if (dataChanged) {
          await handler.save(file, data);
        }
      } catch (e) {
        console.error(`Failed to process link removal in ${file.path}:`, e);
      }
    }
  }
};
var JsonTableSettingTab = class extends import_obsidian7.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const {
      containerEl
    } = this;
    containerEl.empty();
    containerEl.createEl("h2", {
      text: "Tables Settings"
    });
    new import_obsidian7.Setting(containerEl).setName("Table Renderer").setDesc(
      "By default, Tables uses .table.md to maximise compatibility and incorporate Obsidian backlink functionality. JSON is an alternative - it's faster and uses native JSON. Use if experiencing issues with the default renderer. Reload Obsidian for changes to take full effect on file handling and creation."
    ).addDropdown((dropdown) => dropdown.addOption("default", "Default (.table.md)").addOption("json", "JSON (.table.json)").setValue(this.plugin.settings.tableRenderer).onChange(async (value) => {
      this.plugin.settings.tableRenderer = value;
      await this.plugin.saveSettings();
      new import_obsidian7.Notice("Reload required for file handling changes to take full effect.", 7e3);
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
